plugins {
    id 'java-gradle-plugin'
    id 'java-test-fixtures'
    id 'maven-publish'
    id "com.gradle.plugin-publish" version "0.20.0"
    id 'com.github.psxpaul.execfork'
    id 'groovy'
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functionalTest/groovy')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath += sourceSets.main.output + sourceSets.testFixtures.output
        runtimeClasspath += output + compileClasspath
    }
}

gradlePlugin {
    plugins {
        projektorPlugin {
            id = 'dev.projektor.publish'
            implementationClass = 'projektor.plugin.ProjektorPublishPlugin'
        }
    }
    testSourceSets sourceSets.test, sourceSets.functionalTest
}

pluginBundle {
    website = 'https://projektor.dev/docs/gradle-plugin/'
    vcsUrl = 'https://github.com/craigatk/projektor'
    description = 'Automatically publish test reports to a Projektor report server'
    tags = ['testing', 'report']

    plugins {
        projektorPlugin {
            displayName = 'Projektor publishing plugin'
        }
    }
}

repositories {
    mavenCentral()
}

group = "dev.projektor"
version = "8.0.2"

dependencies {
    implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")

    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    implementation "io.github.resilience4j:resilience4j-retry:1.7.1"

    implementation "org.eclipse.jgit:org.eclipse.jgit:6.0.0.202111291000-r"

    testImplementation("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation "org.spockframework:spock-junit4:$spockVersion"
    testImplementation "net.bytebuddy:byte-buddy:1.12.10"
    testImplementation 'org.objenesis:objenesis:3.2'

    testImplementation "com.github.tomakehurst:wiremock-jre8:$wiremockVersion"

    testImplementation(project(":server:parsing:coverage-parser"))
    testImplementation(project(":server:parsing:grouped-results-parser"))
    testImplementation(project(":server:test:test-fixtures"))

    testFixturesImplementation "org.spockframework:spock-core:$spockVersion"
    testFixturesImplementation "org.spockframework:spock-junit4:$spockVersion"

    functionalTestImplementation "org.spockframework:spock-core:$spockVersion"
    functionalTestImplementation "org.spockframework:spock-junit4:$spockVersion"
    functionalTestImplementation gradleTestKit()
    functionalTestImplementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")
    functionalTestImplementation("com.squareup.okhttp3:logging-interceptor:${okHttpVersion}")
    functionalTestImplementation("org.apache.commons:commons-lang3:3.12.0")
    functionalTestImplementation(project(":server:server-client"))
}

test {
    useJUnitPlatform()

    maxParallelForks = Math.floorDiv(Runtime.runtime.availableProcessors(), 2) + 1
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath

    useJUnitPlatform()
}

check.dependsOn functionalTest

// https://github.com/psxpaul/gradle-execfork-plugin
task startServerDaemon(type: com.github.psxpaul.task.JavaExecFork) {
    dependsOn ':server:server-app:shadowJar'
    classpath = tasks.getByPath(':server:server-app:shadowJar').outputs.files
    main = 'io.ktor.server.netty.EngineMain'
    stopAfter = functionalTest
    waitForOutput = 'Application started'
    timeout = 120
    environment = [
            'PORT': '8092',
            "ATTACHMENT_URL": "http://localhost:9000",
            "ATTACHMENT_BUCKET_NAME": "functionaltest",
            "ATTACHMENT_AUTO_CREATE_BUCKET": "true",
            "ATTACHMENT_ACCESS_KEY": "minio_access_key",
            "ATTACHMENT_SECRET_KEY": "minio_secret_key"
    ]
}
functionalTest.dependsOn startServerDaemon
