/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.daos;


import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import projektor.database.generated.tables.CodeCoverageFile;
import projektor.database.generated.tables.records.CodeCoverageFileRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeCoverageFileDao extends DAOImpl<CodeCoverageFileRecord, projektor.database.generated.tables.pojos.CodeCoverageFile, Long> {

    /**
     * Create a new CodeCoverageFileDao without any configuration
     */
    public CodeCoverageFileDao() {
        super(CodeCoverageFile.CODE_COVERAGE_FILE, projektor.database.generated.tables.pojos.CodeCoverageFile.class);
    }

    /**
     * Create a new CodeCoverageFileDao with an attached configuration
     */
    public CodeCoverageFileDao(Configuration configuration) {
        super(CodeCoverageFile.CODE_COVERAGE_FILE, projektor.database.generated.tables.pojos.CodeCoverageFile.class, configuration);
    }

    @Override
    public Long getId(projektor.database.generated.tables.pojos.CodeCoverageFile object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchById(Long... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public projektor.database.generated.tables.pojos.CodeCoverageFile fetchOneById(Long value) {
        return fetchOne(CodeCoverageFile.CODE_COVERAGE_FILE.ID, value);
    }

    /**
     * Fetch records that have <code>code_coverage_run_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfCodeCoverageRunId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.CODE_COVERAGE_RUN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code_coverage_run_id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchByCodeCoverageRunId(Long... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.CODE_COVERAGE_RUN_ID, values);
    }

    /**
     * Fetch records that have <code>code_coverage_group_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfCodeCoverageGroupId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.CODE_COVERAGE_GROUP_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code_coverage_group_id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchByCodeCoverageGroupId(Long... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.CODE_COVERAGE_GROUP_ID, values);
    }

    /**
     * Fetch records that have <code>stats_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfStatsId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.STATS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stats_id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchByStatsId(Long... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.STATS_ID, values);
    }

    /**
     * Fetch records that have <code>directory_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfDirectoryName(String lowerInclusive, String upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.DIRECTORY_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>directory_name IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchByDirectoryName(String... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.DIRECTORY_NAME, values);
    }

    /**
     * Fetch records that have <code>file_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfFileName(String lowerInclusive, String upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.FILE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>file_name IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchByFileName(String... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.FILE_NAME, values);
    }

    /**
     * Fetch records that have <code>missed_lines BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfMissedLines(Integer[] lowerInclusive, Integer[] upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.MISSED_LINES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>missed_lines IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchByMissedLines(Integer[]... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.MISSED_LINES, values);
    }

    /**
     * Fetch records that have <code>partial_lines BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchRangeOfPartialLines(Integer[] lowerInclusive, Integer[] upperInclusive) {
        return fetchRange(CodeCoverageFile.CODE_COVERAGE_FILE.PARTIAL_LINES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partial_lines IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.CodeCoverageFile> fetchByPartialLines(Integer[]... values) {
        return fetch(CodeCoverageFile.CODE_COVERAGE_FILE.PARTIAL_LINES, values);
    }
}
