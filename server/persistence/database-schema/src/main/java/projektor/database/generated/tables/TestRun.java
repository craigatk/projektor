/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.CodeQualityReport.CodeQualityReportPath;
import projektor.database.generated.tables.GitMetadata.GitMetadataPath;
import projektor.database.generated.tables.PerformanceResults.PerformanceResultsPath;
import projektor.database.generated.tables.ResultsMetadata.ResultsMetadataPath;
import projektor.database.generated.tables.TestRunSystemAttributes.TestRunSystemAttributesPath;
import projektor.database.generated.tables.TestSuite.TestSuitePath;
import projektor.database.generated.tables.TestSuiteGroup.TestSuiteGroupPath;
import projektor.database.generated.tables.records.TestRunRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestRun extends TableImpl<TestRunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.test_run</code>
     */
    public static final TestRun TEST_RUN = new TestRun();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRunRecord> getRecordType() {
        return TestRunRecord.class;
    }

    /**
     * The column <code>public.test_run.id</code>.
     */
    public final TableField<TestRunRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.test_run.public_id</code>.
     */
    public final TableField<TestRunRecord, String> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.test_run.total_test_count</code>.
     */
    public final TableField<TestRunRecord, Integer> TOTAL_TEST_COUNT = createField(DSL.name("total_test_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_run.total_passing_count</code>.
     */
    public final TableField<TestRunRecord, Integer> TOTAL_PASSING_COUNT = createField(DSL.name("total_passing_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_run.total_skipped_count</code>.
     */
    public final TableField<TestRunRecord, Integer> TOTAL_SKIPPED_COUNT = createField(DSL.name("total_skipped_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_run.total_failure_count</code>.
     */
    public final TableField<TestRunRecord, Integer> TOTAL_FAILURE_COUNT = createField(DSL.name("total_failure_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_run.passed</code>.
     */
    public final TableField<TestRunRecord, Boolean> PASSED = createField(DSL.name("passed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.test_run.cumulative_duration</code>.
     */
    public final TableField<TestRunRecord, BigDecimal> CUMULATIVE_DURATION = createField(DSL.name("cumulative_duration"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    /**
     * The column <code>public.test_run.average_duration</code>.
     */
    public final TableField<TestRunRecord, BigDecimal> AVERAGE_DURATION = createField(DSL.name("average_duration"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    /**
     * The column <code>public.test_run.slowest_test_case_duration</code>.
     */
    public final TableField<TestRunRecord, BigDecimal> SLOWEST_TEST_CASE_DURATION = createField(DSL.name("slowest_test_case_duration"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    /**
     * The column <code>public.test_run.created_timestamp</code>.
     */
    public final TableField<TestRunRecord, LocalDateTime> CREATED_TIMESTAMP = createField(DSL.name("created_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.test_run.wall_clock_duration</code>.
     */
    public final TableField<TestRunRecord, BigDecimal> WALL_CLOCK_DURATION = createField(DSL.name("wall_clock_duration"), SQLDataType.NUMERIC(12, 3), this, "");

    private TestRun(Name alias, Table<TestRunRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TestRun(Name alias, Table<TestRunRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.test_run</code> table reference
     */
    public TestRun(String alias) {
        this(DSL.name(alias), TEST_RUN);
    }

    /**
     * Create an aliased <code>public.test_run</code> table reference
     */
    public TestRun(Name alias) {
        this(alias, TEST_RUN);
    }

    /**
     * Create a <code>public.test_run</code> table reference
     */
    public TestRun() {
        this(DSL.name("test_run"), null);
    }

    public <O extends Record> TestRun(Table<O> path, ForeignKey<O, TestRunRecord> childPath, InverseForeignKey<O, TestRunRecord> parentPath) {
        super(path, childPath, parentPath, TEST_RUN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TestRunPath extends TestRun implements Path<TestRunRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TestRunPath(Table<O> path, ForeignKey<O, TestRunRecord> childPath, InverseForeignKey<O, TestRunRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TestRunPath(Name alias, Table<TestRunRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TestRunPath as(String alias) {
            return new TestRunPath(DSL.name(alias), this);
        }

        @Override
        public TestRunPath as(Name alias) {
            return new TestRunPath(alias, this);
        }

        @Override
        public TestRunPath as(Table<?> alias) {
            return new TestRunPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TEST_RUN_PUBLIC_ID);
    }

    @Override
    public Identity<TestRunRecord, Long> getIdentity() {
        return (Identity<TestRunRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestRunRecord> getPrimaryKey() {
        return Keys.TEST_RUN_PKEY;
    }

    @Override
    public List<UniqueKey<TestRunRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.TEST_RUN_PUBLIC_ID_KEY);
    }

    private transient CodeQualityReportPath _codeQualityReport;

    /**
     * Get the implicit to-many join path to the
     * <code>public.code_quality_report</code> table
     */
    public CodeQualityReportPath codeQualityReport() {
        if (_codeQualityReport == null)
            _codeQualityReport = new CodeQualityReportPath(this, null, Keys.CODE_QUALITY_REPORT__CODE_QUALITY_REPORT_TEST_RUN_ID_FKEY.getInverseKey());

        return _codeQualityReport;
    }

    private transient GitMetadataPath _gitMetadata;

    /**
     * Get the implicit to-many join path to the
     * <code>public.git_metadata</code> table
     */
    public GitMetadataPath gitMetadata() {
        if (_gitMetadata == null)
            _gitMetadata = new GitMetadataPath(this, null, Keys.GIT_METADATA__GIT_METADATA_TEST_RUN_ID_FKEY.getInverseKey());

        return _gitMetadata;
    }

    private transient PerformanceResultsPath _performanceResults;

    /**
     * Get the implicit to-many join path to the
     * <code>public.performance_results</code> table
     */
    public PerformanceResultsPath performanceResults() {
        if (_performanceResults == null)
            _performanceResults = new PerformanceResultsPath(this, null, Keys.PERFORMANCE_RESULTS__PERFORMANCE_RESULTS_TEST_RUN_ID_FKEY.getInverseKey());

        return _performanceResults;
    }

    private transient ResultsMetadataPath _resultsMetadata;

    /**
     * Get the implicit to-many join path to the
     * <code>public.results_metadata</code> table
     */
    public ResultsMetadataPath resultsMetadata() {
        if (_resultsMetadata == null)
            _resultsMetadata = new ResultsMetadataPath(this, null, Keys.RESULTS_METADATA__RESULTS_METADATA_TEST_RUN_ID_FKEY.getInverseKey());

        return _resultsMetadata;
    }

    private transient TestRunSystemAttributesPath _testRunSystemAttributes;

    /**
     * Get the implicit to-many join path to the
     * <code>public.test_run_system_attributes</code> table
     */
    public TestRunSystemAttributesPath testRunSystemAttributes() {
        if (_testRunSystemAttributes == null)
            _testRunSystemAttributes = new TestRunSystemAttributesPath(this, null, Keys.TEST_RUN_SYSTEM_ATTRIBUTES__TEST_RUN_SYSTEM_ATTRIBUTES_TEST_RUN_PUBLIC_ID_FKEY.getInverseKey());

        return _testRunSystemAttributes;
    }

    private transient TestSuiteGroupPath _testSuiteGroup;

    /**
     * Get the implicit to-many join path to the
     * <code>public.test_suite_group</code> table
     */
    public TestSuiteGroupPath testSuiteGroup() {
        if (_testSuiteGroup == null)
            _testSuiteGroup = new TestSuiteGroupPath(this, null, Keys.TEST_SUITE_GROUP__TEST_SUITE_GROUP_TEST_RUN_ID_FKEY.getInverseKey());

        return _testSuiteGroup;
    }

    private transient TestSuitePath _testSuite;

    /**
     * Get the implicit to-many join path to the <code>public.test_suite</code>
     * table
     */
    public TestSuitePath testSuite() {
        if (_testSuite == null)
            _testSuite = new TestSuitePath(this, null, Keys.TEST_SUITE__TEST_SUITE_TEST_RUN_ID_FKEY.getInverseKey());

        return _testSuite;
    }

    @Override
    public TestRun as(String alias) {
        return new TestRun(DSL.name(alias), this);
    }

    @Override
    public TestRun as(Name alias) {
        return new TestRun(alias, this);
    }

    @Override
    public TestRun as(Table<?> alias) {
        return new TestRun(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRun rename(String name) {
        return new TestRun(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRun rename(Name name) {
        return new TestRun(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRun rename(Table<?> name) {
        return new TestRun(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRun where(Condition condition) {
        return new TestRun(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRun where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRun where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRun where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRun where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRun where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRun where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRun where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRun whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRun whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
