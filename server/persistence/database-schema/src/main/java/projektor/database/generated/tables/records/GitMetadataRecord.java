/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.GitMetadata;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GitMetadataRecord extends UpdatableRecordImpl<GitMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.git_metadata.id</code>.
     */
    public GitMetadataRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.git_metadata.test_run_id</code>.
     */
    public GitMetadataRecord setTestRunId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.test_run_id</code>.
     */
    public Long getTestRunId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.git_metadata.repo_name</code>.
     */
    public GitMetadataRecord setRepoName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.repo_name</code>.
     */
    public String getRepoName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.git_metadata.is_main_branch</code>.
     */
    public GitMetadataRecord setIsMainBranch(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.is_main_branch</code>.
     */
    public Boolean getIsMainBranch() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.git_metadata.branch_name</code>.
     */
    public GitMetadataRecord setBranchName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.branch_name</code>.
     */
    public String getBranchName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.git_metadata.org_name</code>.
     */
    public GitMetadataRecord setOrgName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.org_name</code>.
     */
    public String getOrgName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.git_metadata.project_name</code>.
     */
    public GitMetadataRecord setProjectName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.project_name</code>.
     */
    public String getProjectName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.git_metadata.pull_request_number</code>.
     */
    public GitMetadataRecord setPullRequestNumber(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.pull_request_number</code>.
     */
    public Integer getPullRequestNumber() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>public.git_metadata.commit_sha</code>.
     */
    public GitMetadataRecord setCommitSha(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.git_metadata.commit_sha</code>.
     */
    public String getCommitSha() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GitMetadataRecord
     */
    public GitMetadataRecord() {
        super(GitMetadata.GIT_METADATA);
    }

    /**
     * Create a detached, initialised GitMetadataRecord
     */
    public GitMetadataRecord(Long id, Long testRunId, String repoName, Boolean isMainBranch, String branchName, String orgName, String projectName, Integer pullRequestNumber, String commitSha) {
        super(GitMetadata.GIT_METADATA);

        setId(id);
        setTestRunId(testRunId);
        setRepoName(repoName);
        setIsMainBranch(isMainBranch);
        setBranchName(branchName);
        setOrgName(orgName);
        setProjectName(projectName);
        setPullRequestNumber(pullRequestNumber);
        setCommitSha(commitSha);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised GitMetadataRecord
     */
    public GitMetadataRecord(projektor.database.generated.tables.pojos.GitMetadata value) {
        super(GitMetadata.GIT_METADATA);

        if (value != null) {
            setId(value.getId());
            setTestRunId(value.getTestRunId());
            setRepoName(value.getRepoName());
            setIsMainBranch(value.getIsMainBranch());
            setBranchName(value.getBranchName());
            setOrgName(value.getOrgName());
            setProjectName(value.getProjectName());
            setPullRequestNumber(value.getPullRequestNumber());
            setCommitSha(value.getCommitSha());
            resetTouchedOnNotNull();
        }
    }
}
