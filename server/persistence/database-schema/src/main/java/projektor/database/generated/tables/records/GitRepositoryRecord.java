/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.GitRepository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GitRepositoryRecord extends UpdatableRecordImpl<GitRepositoryRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.git_repository.repo_name</code>.
     */
    public GitRepositoryRecord setRepoName(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.git_repository.repo_name</code>.
     */
    public String getRepoName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.git_repository.org_name</code>.
     */
    public GitRepositoryRecord setOrgName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.git_repository.org_name</code>.
     */
    public String getOrgName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return GitRepository.GIT_REPOSITORY.REPO_NAME;
    }

    @Override
    public Field<String> field2() {
        return GitRepository.GIT_REPOSITORY.ORG_NAME;
    }

    @Override
    public String component1() {
        return getRepoName();
    }

    @Override
    public String component2() {
        return getOrgName();
    }

    @Override
    public String value1() {
        return getRepoName();
    }

    @Override
    public String value2() {
        return getOrgName();
    }

    @Override
    public GitRepositoryRecord value1(String value) {
        setRepoName(value);
        return this;
    }

    @Override
    public GitRepositoryRecord value2(String value) {
        setOrgName(value);
        return this;
    }

    @Override
    public GitRepositoryRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GitRepositoryRecord
     */
    public GitRepositoryRecord() {
        super(GitRepository.GIT_REPOSITORY);
    }

    /**
     * Create a detached, initialised GitRepositoryRecord
     */
    public GitRepositoryRecord(String repoName, String orgName) {
        super(GitRepository.GIT_REPOSITORY);

        setRepoName(repoName);
        setOrgName(orgName);
    }
}
