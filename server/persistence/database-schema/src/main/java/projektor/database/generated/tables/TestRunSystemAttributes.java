/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.TestRun.TestRunPath;
import projektor.database.generated.tables.records.TestRunSystemAttributesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestRunSystemAttributes extends TableImpl<TestRunSystemAttributesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.test_run_system_attributes</code>
     */
    public static final TestRunSystemAttributes TEST_RUN_SYSTEM_ATTRIBUTES = new TestRunSystemAttributes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRunSystemAttributesRecord> getRecordType() {
        return TestRunSystemAttributesRecord.class;
    }

    /**
     * The column
     * <code>public.test_run_system_attributes.test_run_public_id</code>.
     */
    public final TableField<TestRunSystemAttributesRecord, String> TEST_RUN_PUBLIC_ID = createField(DSL.name("test_run_public_id"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>public.test_run_system_attributes.pinned</code>.
     */
    public final TableField<TestRunSystemAttributesRecord, Boolean> PINNED = createField(DSL.name("pinned"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private TestRunSystemAttributes(Name alias, Table<TestRunSystemAttributesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TestRunSystemAttributes(Name alias, Table<TestRunSystemAttributesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.test_run_system_attributes</code> table
     * reference
     */
    public TestRunSystemAttributes(String alias) {
        this(DSL.name(alias), TEST_RUN_SYSTEM_ATTRIBUTES);
    }

    /**
     * Create an aliased <code>public.test_run_system_attributes</code> table
     * reference
     */
    public TestRunSystemAttributes(Name alias) {
        this(alias, TEST_RUN_SYSTEM_ATTRIBUTES);
    }

    /**
     * Create a <code>public.test_run_system_attributes</code> table reference
     */
    public TestRunSystemAttributes() {
        this(DSL.name("test_run_system_attributes"), null);
    }

    public <O extends Record> TestRunSystemAttributes(Table<O> path, ForeignKey<O, TestRunSystemAttributesRecord> childPath, InverseForeignKey<O, TestRunSystemAttributesRecord> parentPath) {
        super(path, childPath, parentPath, TEST_RUN_SYSTEM_ATTRIBUTES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TestRunSystemAttributesPath extends TestRunSystemAttributes implements Path<TestRunSystemAttributesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TestRunSystemAttributesPath(Table<O> path, ForeignKey<O, TestRunSystemAttributesRecord> childPath, InverseForeignKey<O, TestRunSystemAttributesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TestRunSystemAttributesPath(Name alias, Table<TestRunSystemAttributesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TestRunSystemAttributesPath as(String alias) {
            return new TestRunSystemAttributesPath(DSL.name(alias), this);
        }

        @Override
        public TestRunSystemAttributesPath as(Name alias) {
            return new TestRunSystemAttributesPath(alias, this);
        }

        @Override
        public TestRunSystemAttributesPath as(Table<?> alias) {
            return new TestRunSystemAttributesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TestRunSystemAttributesRecord> getPrimaryKey() {
        return Keys.TEST_RUN_SYSTEM_ATTRIBUTES_PKEY;
    }

    @Override
    public List<ForeignKey<TestRunSystemAttributesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEST_RUN_SYSTEM_ATTRIBUTES__TEST_RUN_SYSTEM_ATTRIBUTES_TEST_RUN_PUBLIC_ID_FKEY);
    }

    private transient TestRunPath _testRun;

    /**
     * Get the implicit join path to the <code>public.test_run</code> table.
     */
    public TestRunPath testRun() {
        if (_testRun == null)
            _testRun = new TestRunPath(this, Keys.TEST_RUN_SYSTEM_ATTRIBUTES__TEST_RUN_SYSTEM_ATTRIBUTES_TEST_RUN_PUBLIC_ID_FKEY, null);

        return _testRun;
    }

    @Override
    public TestRunSystemAttributes as(String alias) {
        return new TestRunSystemAttributes(DSL.name(alias), this);
    }

    @Override
    public TestRunSystemAttributes as(Name alias) {
        return new TestRunSystemAttributes(alias, this);
    }

    @Override
    public TestRunSystemAttributes as(Table<?> alias) {
        return new TestRunSystemAttributes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunSystemAttributes rename(String name) {
        return new TestRunSystemAttributes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunSystemAttributes rename(Name name) {
        return new TestRunSystemAttributes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunSystemAttributes rename(Table<?> name) {
        return new TestRunSystemAttributes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRunSystemAttributes where(Condition condition) {
        return new TestRunSystemAttributes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRunSystemAttributes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRunSystemAttributes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRunSystemAttributes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRunSystemAttributes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRunSystemAttributes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRunSystemAttributes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestRunSystemAttributes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRunSystemAttributes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestRunSystemAttributes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
