/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.CodeCoverageStats;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CodeCoverageStatsRecord extends UpdatableRecordImpl<CodeCoverageStatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.code_coverage_stats.id</code>.
     */
    public CodeCoverageStatsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.code_coverage_stats.code_coverage_run_id</code>.
     */
    public CodeCoverageStatsRecord setCodeCoverageRunId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.code_coverage_run_id</code>.
     */
    public Long getCodeCoverageRunId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.code_coverage_stats.scope</code>.
     */
    public CodeCoverageStatsRecord setScope(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.scope</code>.
     */
    public String getScope() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.code_coverage_stats.statement_covered</code>.
     */
    public CodeCoverageStatsRecord setStatementCovered(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.statement_covered</code>.
     */
    public Integer getStatementCovered() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.code_coverage_stats.statement_missed</code>.
     */
    public CodeCoverageStatsRecord setStatementMissed(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.statement_missed</code>.
     */
    public Integer getStatementMissed() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.code_coverage_stats.line_covered</code>.
     */
    public CodeCoverageStatsRecord setLineCovered(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.line_covered</code>.
     */
    public Integer getLineCovered() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.code_coverage_stats.line_missed</code>.
     */
    public CodeCoverageStatsRecord setLineMissed(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.line_missed</code>.
     */
    public Integer getLineMissed() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.code_coverage_stats.branch_covered</code>.
     */
    public CodeCoverageStatsRecord setBranchCovered(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.branch_covered</code>.
     */
    public Integer getBranchCovered() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>public.code_coverage_stats.branch_missed</code>.
     */
    public CodeCoverageStatsRecord setBranchMissed(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_stats.branch_missed</code>.
     */
    public Integer getBranchMissed() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CodeCoverageStatsRecord
     */
    public CodeCoverageStatsRecord() {
        super(CodeCoverageStats.CODE_COVERAGE_STATS);
    }

    /**
     * Create a detached, initialised CodeCoverageStatsRecord
     */
    public CodeCoverageStatsRecord(Long id, Long codeCoverageRunId, String scope, Integer statementCovered, Integer statementMissed, Integer lineCovered, Integer lineMissed, Integer branchCovered, Integer branchMissed) {
        super(CodeCoverageStats.CODE_COVERAGE_STATS);

        setId(id);
        setCodeCoverageRunId(codeCoverageRunId);
        setScope(scope);
        setStatementCovered(statementCovered);
        setStatementMissed(statementMissed);
        setLineCovered(lineCovered);
        setLineMissed(lineMissed);
        setBranchCovered(branchCovered);
        setBranchMissed(branchMissed);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised CodeCoverageStatsRecord
     */
    public CodeCoverageStatsRecord(projektor.database.generated.tables.pojos.CodeCoverageStats value) {
        super(CodeCoverageStats.CODE_COVERAGE_STATS);

        if (value != null) {
            setId(value.getId());
            setCodeCoverageRunId(value.getCodeCoverageRunId());
            setScope(value.getScope());
            setStatementCovered(value.getStatementCovered());
            setStatementMissed(value.getStatementMissed());
            setLineCovered(value.getLineCovered());
            setLineMissed(value.getLineMissed());
            setBranchCovered(value.getBranchCovered());
            setBranchMissed(value.getBranchMissed());
            resetTouchedOnNotNull();
        }
    }
}
