/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.TestRunAttachmentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRunAttachment extends TableImpl<TestRunAttachmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.test_run_attachment</code>
     */
    public static final TestRunAttachment TEST_RUN_ATTACHMENT = new TestRunAttachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRunAttachmentRecord> getRecordType() {
        return TestRunAttachmentRecord.class;
    }

    /**
     * The column <code>public.test_run_attachment.id</code>.
     */
    public final TableField<TestRunAttachmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.test_run_attachment.file_name</code>.
     */
    public final TableField<TestRunAttachmentRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_run_attachment.object_name</code>.
     */
    public final TableField<TestRunAttachmentRecord, String> OBJECT_NAME = createField(DSL.name("object_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_run_attachment.file_size</code>.
     */
    public final TableField<TestRunAttachmentRecord, Long> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.test_run_attachment.test_run_public_id</code>.
     */
    public final TableField<TestRunAttachmentRecord, String> TEST_RUN_PUBLIC_ID = createField(DSL.name("test_run_public_id"), SQLDataType.VARCHAR(12), this, "");

    private TestRunAttachment(Name alias, Table<TestRunAttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TestRunAttachment(Name alias, Table<TestRunAttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.test_run_attachment</code> table reference
     */
    public TestRunAttachment(String alias) {
        this(DSL.name(alias), TEST_RUN_ATTACHMENT);
    }

    /**
     * Create an aliased <code>public.test_run_attachment</code> table reference
     */
    public TestRunAttachment(Name alias) {
        this(alias, TEST_RUN_ATTACHMENT);
    }

    /**
     * Create a <code>public.test_run_attachment</code> table reference
     */
    public TestRunAttachment() {
        this(DSL.name("test_run_attachment"), null);
    }

    public <O extends Record> TestRunAttachment(Table<O> child, ForeignKey<O, TestRunAttachmentRecord> key) {
        super(child, key, TEST_RUN_ATTACHMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_ATTACHMENT_TEST_RUN_ID);
    }

    @Override
    public Identity<TestRunAttachmentRecord, Long> getIdentity() {
        return (Identity<TestRunAttachmentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestRunAttachmentRecord> getPrimaryKey() {
        return Keys.TEST_RUN_ATTACHMENT_PKEY;
    }

    @Override
    public List<UniqueKey<TestRunAttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<TestRunAttachmentRecord>>asList(Keys.TEST_RUN_ATTACHMENT_PKEY);
    }

    @Override
    public TestRunAttachment as(String alias) {
        return new TestRunAttachment(DSL.name(alias), this);
    }

    @Override
    public TestRunAttachment as(Name alias) {
        return new TestRunAttachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAttachment rename(String name) {
        return new TestRunAttachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestRunAttachment rename(Name name) {
        return new TestRunAttachment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, Long, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
