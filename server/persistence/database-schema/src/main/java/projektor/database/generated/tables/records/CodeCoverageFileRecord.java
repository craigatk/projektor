/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.CodeCoverageFile;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CodeCoverageFileRecord extends UpdatableRecordImpl<CodeCoverageFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.code_coverage_file.id</code>.
     */
    public CodeCoverageFileRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.code_coverage_file.code_coverage_run_id</code>.
     */
    public CodeCoverageFileRecord setCodeCoverageRunId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.code_coverage_run_id</code>.
     */
    public Long getCodeCoverageRunId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.code_coverage_file.code_coverage_group_id</code>.
     */
    public CodeCoverageFileRecord setCodeCoverageGroupId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.code_coverage_group_id</code>.
     */
    public Long getCodeCoverageGroupId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.code_coverage_file.stats_id</code>.
     */
    public CodeCoverageFileRecord setStatsId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.stats_id</code>.
     */
    public Long getStatsId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.code_coverage_file.directory_name</code>.
     */
    public CodeCoverageFileRecord setDirectoryName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.directory_name</code>.
     */
    public String getDirectoryName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.code_coverage_file.file_name</code>.
     */
    public CodeCoverageFileRecord setFileName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.file_name</code>.
     */
    public String getFileName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.code_coverage_file.missed_lines</code>.
     */
    public CodeCoverageFileRecord setMissedLines(Integer[] value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.missed_lines</code>.
     */
    public Integer[] getMissedLines() {
        return (Integer[]) get(6);
    }

    /**
     * Setter for <code>public.code_coverage_file.partial_lines</code>.
     */
    public CodeCoverageFileRecord setPartialLines(Integer[] value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.partial_lines</code>.
     */
    public Integer[] getPartialLines() {
        return (Integer[]) get(7);
    }

    /**
     * Setter for <code>public.code_coverage_file.file_path</code>.
     */
    public CodeCoverageFileRecord setFilePath(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.file_path</code>.
     */
    public String getFilePath() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CodeCoverageFileRecord
     */
    public CodeCoverageFileRecord() {
        super(CodeCoverageFile.CODE_COVERAGE_FILE);
    }

    /**
     * Create a detached, initialised CodeCoverageFileRecord
     */
    public CodeCoverageFileRecord(Long id, Long codeCoverageRunId, Long codeCoverageGroupId, Long statsId, String directoryName, String fileName, Integer[] missedLines, Integer[] partialLines, String filePath) {
        super(CodeCoverageFile.CODE_COVERAGE_FILE);

        setId(id);
        setCodeCoverageRunId(codeCoverageRunId);
        setCodeCoverageGroupId(codeCoverageGroupId);
        setStatsId(statsId);
        setDirectoryName(directoryName);
        setFileName(fileName);
        setMissedLines(missedLines);
        setPartialLines(partialLines);
        setFilePath(filePath);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised CodeCoverageFileRecord
     */
    public CodeCoverageFileRecord(projektor.database.generated.tables.pojos.CodeCoverageFile value) {
        super(CodeCoverageFile.CODE_COVERAGE_FILE);

        if (value != null) {
            setId(value.getId());
            setCodeCoverageRunId(value.getCodeCoverageRunId());
            setCodeCoverageGroupId(value.getCodeCoverageGroupId());
            setStatsId(value.getStatsId());
            setDirectoryName(value.getDirectoryName());
            setFileName(value.getFileName());
            setMissedLines(value.getMissedLines());
            setPartialLines(value.getPartialLines());
            setFilePath(value.getFilePath());
            resetTouchedOnNotNull();
        }
    }
}
