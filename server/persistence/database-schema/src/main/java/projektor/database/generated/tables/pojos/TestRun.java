/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestRun implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long id;
    private String publicId;
    private Integer totalTestCount;
    private Integer totalPassingCount;
    private Integer totalSkippedCount;
    private Integer totalFailureCount;
    private Boolean passed;
    private BigDecimal cumulativeDuration;
    private BigDecimal averageDuration;
    private BigDecimal slowestTestCaseDuration;
    private LocalDateTime createdTimestamp;
    private BigDecimal wallClockDuration;

    public TestRun() {}

    public TestRun(TestRun value) {
        this.id = value.id;
        this.publicId = value.publicId;
        this.totalTestCount = value.totalTestCount;
        this.totalPassingCount = value.totalPassingCount;
        this.totalSkippedCount = value.totalSkippedCount;
        this.totalFailureCount = value.totalFailureCount;
        this.passed = value.passed;
        this.cumulativeDuration = value.cumulativeDuration;
        this.averageDuration = value.averageDuration;
        this.slowestTestCaseDuration = value.slowestTestCaseDuration;
        this.createdTimestamp = value.createdTimestamp;
        this.wallClockDuration = value.wallClockDuration;
    }

    public TestRun(
        Long id,
        String publicId,
        Integer totalTestCount,
        Integer totalPassingCount,
        Integer totalSkippedCount,
        Integer totalFailureCount,
        Boolean passed,
        BigDecimal cumulativeDuration,
        BigDecimal averageDuration,
        BigDecimal slowestTestCaseDuration,
        LocalDateTime createdTimestamp,
        BigDecimal wallClockDuration
    ) {
        this.id = id;
        this.publicId = publicId;
        this.totalTestCount = totalTestCount;
        this.totalPassingCount = totalPassingCount;
        this.totalSkippedCount = totalSkippedCount;
        this.totalFailureCount = totalFailureCount;
        this.passed = passed;
        this.cumulativeDuration = cumulativeDuration;
        this.averageDuration = averageDuration;
        this.slowestTestCaseDuration = slowestTestCaseDuration;
        this.createdTimestamp = createdTimestamp;
        this.wallClockDuration = wallClockDuration;
    }

    /**
     * Getter for <code>public.test_run.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.test_run.id</code>.
     */
    public TestRun setId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.test_run.public_id</code>.
     */
    public String getPublicId() {
        return this.publicId;
    }

    /**
     * Setter for <code>public.test_run.public_id</code>.
     */
    public TestRun setPublicId(String publicId) {
        this.publicId = publicId;
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_test_count</code>.
     */
    public Integer getTotalTestCount() {
        return this.totalTestCount;
    }

    /**
     * Setter for <code>public.test_run.total_test_count</code>.
     */
    public TestRun setTotalTestCount(Integer totalTestCount) {
        this.totalTestCount = totalTestCount;
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_passing_count</code>.
     */
    public Integer getTotalPassingCount() {
        return this.totalPassingCount;
    }

    /**
     * Setter for <code>public.test_run.total_passing_count</code>.
     */
    public TestRun setTotalPassingCount(Integer totalPassingCount) {
        this.totalPassingCount = totalPassingCount;
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_skipped_count</code>.
     */
    public Integer getTotalSkippedCount() {
        return this.totalSkippedCount;
    }

    /**
     * Setter for <code>public.test_run.total_skipped_count</code>.
     */
    public TestRun setTotalSkippedCount(Integer totalSkippedCount) {
        this.totalSkippedCount = totalSkippedCount;
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_failure_count</code>.
     */
    public Integer getTotalFailureCount() {
        return this.totalFailureCount;
    }

    /**
     * Setter for <code>public.test_run.total_failure_count</code>.
     */
    public TestRun setTotalFailureCount(Integer totalFailureCount) {
        this.totalFailureCount = totalFailureCount;
        return this;
    }

    /**
     * Getter for <code>public.test_run.passed</code>.
     */
    public Boolean getPassed() {
        return this.passed;
    }

    /**
     * Setter for <code>public.test_run.passed</code>.
     */
    public TestRun setPassed(Boolean passed) {
        this.passed = passed;
        return this;
    }

    /**
     * Getter for <code>public.test_run.cumulative_duration</code>.
     */
    public BigDecimal getCumulativeDuration() {
        return this.cumulativeDuration;
    }

    /**
     * Setter for <code>public.test_run.cumulative_duration</code>.
     */
    public TestRun setCumulativeDuration(BigDecimal cumulativeDuration) {
        this.cumulativeDuration = cumulativeDuration;
        return this;
    }

    /**
     * Getter for <code>public.test_run.average_duration</code>.
     */
    public BigDecimal getAverageDuration() {
        return this.averageDuration;
    }

    /**
     * Setter for <code>public.test_run.average_duration</code>.
     */
    public TestRun setAverageDuration(BigDecimal averageDuration) {
        this.averageDuration = averageDuration;
        return this;
    }

    /**
     * Getter for <code>public.test_run.slowest_test_case_duration</code>.
     */
    public BigDecimal getSlowestTestCaseDuration() {
        return this.slowestTestCaseDuration;
    }

    /**
     * Setter for <code>public.test_run.slowest_test_case_duration</code>.
     */
    public TestRun setSlowestTestCaseDuration(BigDecimal slowestTestCaseDuration) {
        this.slowestTestCaseDuration = slowestTestCaseDuration;
        return this;
    }

    /**
     * Getter for <code>public.test_run.created_timestamp</code>.
     */
    public LocalDateTime getCreatedTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Setter for <code>public.test_run.created_timestamp</code>.
     */
    public TestRun setCreatedTimestamp(LocalDateTime createdTimestamp) {
        this.createdTimestamp = createdTimestamp;
        return this;
    }

    /**
     * Getter for <code>public.test_run.wall_clock_duration</code>.
     */
    public BigDecimal getWallClockDuration() {
        return this.wallClockDuration;
    }

    /**
     * Setter for <code>public.test_run.wall_clock_duration</code>.
     */
    public TestRun setWallClockDuration(BigDecimal wallClockDuration) {
        this.wallClockDuration = wallClockDuration;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final TestRun other = (TestRun) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.publicId == null) {
            if (other.publicId != null)
                return false;
        }
        else if (!this.publicId.equals(other.publicId))
            return false;
        if (this.totalTestCount == null) {
            if (other.totalTestCount != null)
                return false;
        }
        else if (!this.totalTestCount.equals(other.totalTestCount))
            return false;
        if (this.totalPassingCount == null) {
            if (other.totalPassingCount != null)
                return false;
        }
        else if (!this.totalPassingCount.equals(other.totalPassingCount))
            return false;
        if (this.totalSkippedCount == null) {
            if (other.totalSkippedCount != null)
                return false;
        }
        else if (!this.totalSkippedCount.equals(other.totalSkippedCount))
            return false;
        if (this.totalFailureCount == null) {
            if (other.totalFailureCount != null)
                return false;
        }
        else if (!this.totalFailureCount.equals(other.totalFailureCount))
            return false;
        if (this.passed == null) {
            if (other.passed != null)
                return false;
        }
        else if (!this.passed.equals(other.passed))
            return false;
        if (this.cumulativeDuration == null) {
            if (other.cumulativeDuration != null)
                return false;
        }
        else if (!this.cumulativeDuration.equals(other.cumulativeDuration))
            return false;
        if (this.averageDuration == null) {
            if (other.averageDuration != null)
                return false;
        }
        else if (!this.averageDuration.equals(other.averageDuration))
            return false;
        if (this.slowestTestCaseDuration == null) {
            if (other.slowestTestCaseDuration != null)
                return false;
        }
        else if (!this.slowestTestCaseDuration.equals(other.slowestTestCaseDuration))
            return false;
        if (this.createdTimestamp == null) {
            if (other.createdTimestamp != null)
                return false;
        }
        else if (!this.createdTimestamp.equals(other.createdTimestamp))
            return false;
        if (this.wallClockDuration == null) {
            if (other.wallClockDuration != null)
                return false;
        }
        else if (!this.wallClockDuration.equals(other.wallClockDuration))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.publicId == null) ? 0 : this.publicId.hashCode());
        result = prime * result + ((this.totalTestCount == null) ? 0 : this.totalTestCount.hashCode());
        result = prime * result + ((this.totalPassingCount == null) ? 0 : this.totalPassingCount.hashCode());
        result = prime * result + ((this.totalSkippedCount == null) ? 0 : this.totalSkippedCount.hashCode());
        result = prime * result + ((this.totalFailureCount == null) ? 0 : this.totalFailureCount.hashCode());
        result = prime * result + ((this.passed == null) ? 0 : this.passed.hashCode());
        result = prime * result + ((this.cumulativeDuration == null) ? 0 : this.cumulativeDuration.hashCode());
        result = prime * result + ((this.averageDuration == null) ? 0 : this.averageDuration.hashCode());
        result = prime * result + ((this.slowestTestCaseDuration == null) ? 0 : this.slowestTestCaseDuration.hashCode());
        result = prime * result + ((this.createdTimestamp == null) ? 0 : this.createdTimestamp.hashCode());
        result = prime * result + ((this.wallClockDuration == null) ? 0 : this.wallClockDuration.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("TestRun (");

        sb.append(id);
        sb.append(", ").append(publicId);
        sb.append(", ").append(totalTestCount);
        sb.append(", ").append(totalPassingCount);
        sb.append(", ").append(totalSkippedCount);
        sb.append(", ").append(totalFailureCount);
        sb.append(", ").append(passed);
        sb.append(", ").append(cumulativeDuration);
        sb.append(", ").append(averageDuration);
        sb.append(", ").append(slowestTestCaseDuration);
        sb.append(", ").append(createdTimestamp);
        sb.append(", ").append(wallClockDuration);

        sb.append(")");
        return sb.toString();
    }
}
