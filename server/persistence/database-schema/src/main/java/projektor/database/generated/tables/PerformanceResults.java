/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.TestRun.TestRunPath;
import projektor.database.generated.tables.records.PerformanceResultsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PerformanceResults extends TableImpl<PerformanceResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.performance_results</code>
     */
    public static final PerformanceResults PERFORMANCE_RESULTS = new PerformanceResults();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PerformanceResultsRecord> getRecordType() {
        return PerformanceResultsRecord.class;
    }

    /**
     * The column <code>public.performance_results.id</code>.
     */
    public final TableField<PerformanceResultsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.performance_results.test_run_id</code>.
     */
    public final TableField<PerformanceResultsRecord, Long> TEST_RUN_ID = createField(DSL.name("test_run_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.performance_results.test_run_public_id</code>.
     */
    public final TableField<PerformanceResultsRecord, String> TEST_RUN_PUBLIC_ID = createField(DSL.name("test_run_public_id"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.performance_results.name</code>.
     */
    public final TableField<PerformanceResultsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.performance_results.request_count</code>.
     */
    public final TableField<PerformanceResultsRecord, Long> REQUEST_COUNT = createField(DSL.name("request_count"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.performance_results.requests_per_second</code>.
     */
    public final TableField<PerformanceResultsRecord, BigDecimal> REQUESTS_PER_SECOND = createField(DSL.name("requests_per_second"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    /**
     * The column <code>public.performance_results.average</code>.
     */
    public final TableField<PerformanceResultsRecord, BigDecimal> AVERAGE = createField(DSL.name("average"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    /**
     * The column <code>public.performance_results.maximum</code>.
     */
    public final TableField<PerformanceResultsRecord, BigDecimal> MAXIMUM = createField(DSL.name("maximum"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    /**
     * The column <code>public.performance_results.p95</code>.
     */
    public final TableField<PerformanceResultsRecord, BigDecimal> P95 = createField(DSL.name("p95"), SQLDataType.NUMERIC(12, 3).nullable(false), this, "");

    private PerformanceResults(Name alias, Table<PerformanceResultsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PerformanceResults(Name alias, Table<PerformanceResultsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.performance_results</code> table reference
     */
    public PerformanceResults(String alias) {
        this(DSL.name(alias), PERFORMANCE_RESULTS);
    }

    /**
     * Create an aliased <code>public.performance_results</code> table reference
     */
    public PerformanceResults(Name alias) {
        this(alias, PERFORMANCE_RESULTS);
    }

    /**
     * Create a <code>public.performance_results</code> table reference
     */
    public PerformanceResults() {
        this(DSL.name("performance_results"), null);
    }

    public <O extends Record> PerformanceResults(Table<O> path, ForeignKey<O, PerformanceResultsRecord> childPath, InverseForeignKey<O, PerformanceResultsRecord> parentPath) {
        super(path, childPath, parentPath, PERFORMANCE_RESULTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PerformanceResultsPath extends PerformanceResults implements Path<PerformanceResultsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PerformanceResultsPath(Table<O> path, ForeignKey<O, PerformanceResultsRecord> childPath, InverseForeignKey<O, PerformanceResultsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PerformanceResultsPath(Name alias, Table<PerformanceResultsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PerformanceResultsPath as(String alias) {
            return new PerformanceResultsPath(DSL.name(alias), this);
        }

        @Override
        public PerformanceResultsPath as(Name alias) {
            return new PerformanceResultsPath(alias, this);
        }

        @Override
        public PerformanceResultsPath as(Table<?> alias) {
            return new PerformanceResultsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PERFORMANCE_RESULTS_PUBLIC_ID_IDX, Indexes.PERFORMANCE_RESULTS_RUN_ID_IDX);
    }

    @Override
    public Identity<PerformanceResultsRecord, Long> getIdentity() {
        return (Identity<PerformanceResultsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PerformanceResultsRecord> getPrimaryKey() {
        return Keys.PERFORMANCE_RESULTS_PKEY;
    }

    @Override
    public List<ForeignKey<PerformanceResultsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PERFORMANCE_RESULTS__PERFORMANCE_RESULTS_TEST_RUN_ID_FKEY);
    }

    private transient TestRunPath _testRun;

    /**
     * Get the implicit join path to the <code>public.test_run</code> table.
     */
    public TestRunPath testRun() {
        if (_testRun == null)
            _testRun = new TestRunPath(this, Keys.PERFORMANCE_RESULTS__PERFORMANCE_RESULTS_TEST_RUN_ID_FKEY, null);

        return _testRun;
    }

    @Override
    public PerformanceResults as(String alias) {
        return new PerformanceResults(DSL.name(alias), this);
    }

    @Override
    public PerformanceResults as(Name alias) {
        return new PerformanceResults(alias, this);
    }

    @Override
    public PerformanceResults as(Table<?> alias) {
        return new PerformanceResults(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceResults rename(String name) {
        return new PerformanceResults(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceResults rename(Name name) {
        return new PerformanceResults(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PerformanceResults rename(Table<?> name) {
        return new PerformanceResults(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PerformanceResults where(Condition condition) {
        return new PerformanceResults(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PerformanceResults where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PerformanceResults where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PerformanceResults where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PerformanceResults where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PerformanceResults where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PerformanceResults where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PerformanceResults where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PerformanceResults whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PerformanceResults whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
