/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.TestCase.TestCasePath;
import projektor.database.generated.tables.TestRun.TestRunPath;
import projektor.database.generated.tables.TestSuiteGroup.TestSuiteGroupPath;
import projektor.database.generated.tables.records.TestSuiteRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestSuite extends TableImpl<TestSuiteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.test_suite</code>
     */
    public static final TestSuite TEST_SUITE = new TestSuite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestSuiteRecord> getRecordType() {
        return TestSuiteRecord.class;
    }

    /**
     * The column <code>public.test_suite.id</code>.
     */
    public final TableField<TestSuiteRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.test_suite.test_run_id</code>.
     */
    public final TableField<TestSuiteRecord, Long> TEST_RUN_ID = createField(DSL.name("test_run_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.idx</code>.
     */
    public final TableField<TestSuiteRecord, Integer> IDX = createField(DSL.name("idx"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.package_name</code>.
     */
    public final TableField<TestSuiteRecord, String> PACKAGE_NAME = createField(DSL.name("package_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.class_name</code>.
     */
    public final TableField<TestSuiteRecord, String> CLASS_NAME = createField(DSL.name("class_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.test_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> TEST_COUNT = createField(DSL.name("test_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.passing_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> PASSING_COUNT = createField(DSL.name("passing_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.skipped_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> SKIPPED_COUNT = createField(DSL.name("skipped_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.failure_count</code>.
     */
    public final TableField<TestSuiteRecord, Integer> FAILURE_COUNT = createField(DSL.name("failure_count"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_suite.start_ts</code>.
     */
    public final TableField<TestSuiteRecord, LocalDateTime> START_TS = createField(DSL.name("start_ts"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.test_suite.hostname</code>.
     */
    public final TableField<TestSuiteRecord, String> HOSTNAME = createField(DSL.name("hostname"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.duration</code>.
     */
    public final TableField<TestSuiteRecord, BigDecimal> DURATION = createField(DSL.name("duration"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.test_suite.system_out</code>.
     */
    public final TableField<TestSuiteRecord, String> SYSTEM_OUT = createField(DSL.name("system_out"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.system_err</code>.
     */
    public final TableField<TestSuiteRecord, String> SYSTEM_ERR = createField(DSL.name("system_err"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_suite.has_system_out</code>.
     */
    public final TableField<TestSuiteRecord, Boolean> HAS_SYSTEM_OUT = createField(DSL.name("has_system_out"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.test_suite.has_system_err</code>.
     */
    public final TableField<TestSuiteRecord, Boolean> HAS_SYSTEM_ERR = createField(DSL.name("has_system_err"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.test_suite.test_suite_group_id</code>.
     */
    public final TableField<TestSuiteRecord, Long> TEST_SUITE_GROUP_ID = createField(DSL.name("test_suite_group_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.test_suite.file_name</code>.
     */
    public final TableField<TestSuiteRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.CLOB, this, "");

    private TestSuite(Name alias, Table<TestSuiteRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TestSuite(Name alias, Table<TestSuiteRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.test_suite</code> table reference
     */
    public TestSuite(String alias) {
        this(DSL.name(alias), TEST_SUITE);
    }

    /**
     * Create an aliased <code>public.test_suite</code> table reference
     */
    public TestSuite(Name alias) {
        this(alias, TEST_SUITE);
    }

    /**
     * Create a <code>public.test_suite</code> table reference
     */
    public TestSuite() {
        this(DSL.name("test_suite"), null);
    }

    public <O extends Record> TestSuite(Table<O> path, ForeignKey<O, TestSuiteRecord> childPath, InverseForeignKey<O, TestSuiteRecord> parentPath) {
        super(path, childPath, parentPath, TEST_SUITE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TestSuitePath extends TestSuite implements Path<TestSuiteRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TestSuitePath(Table<O> path, ForeignKey<O, TestSuiteRecord> childPath, InverseForeignKey<O, TestSuiteRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TestSuitePath(Name alias, Table<TestSuiteRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TestSuitePath as(String alias) {
            return new TestSuitePath(DSL.name(alias), this);
        }

        @Override
        public TestSuitePath as(Name alias) {
            return new TestSuitePath(alias, this);
        }

        @Override
        public TestSuitePath as(Table<?> alias) {
            return new TestSuitePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TEST_SUITE_IDX, Indexes.IDX_TEST_SUITE_TEST_RUN_ID);
    }

    @Override
    public Identity<TestSuiteRecord, Long> getIdentity() {
        return (Identity<TestSuiteRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestSuiteRecord> getPrimaryKey() {
        return Keys.TEST_SUITE_PKEY;
    }

    @Override
    public List<ForeignKey<TestSuiteRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEST_SUITE__TEST_SUITE_TEST_RUN_ID_FKEY, Keys.TEST_SUITE__TEST_SUITE_TEST_SUITE_GROUP_ID_FKEY);
    }

    private transient TestRunPath _testRun;

    /**
     * Get the implicit join path to the <code>public.test_run</code> table.
     */
    public TestRunPath testRun() {
        if (_testRun == null)
            _testRun = new TestRunPath(this, Keys.TEST_SUITE__TEST_SUITE_TEST_RUN_ID_FKEY, null);

        return _testRun;
    }

    private transient TestSuiteGroupPath _testSuiteGroup;

    /**
     * Get the implicit join path to the <code>public.test_suite_group</code>
     * table.
     */
    public TestSuiteGroupPath testSuiteGroup() {
        if (_testSuiteGroup == null)
            _testSuiteGroup = new TestSuiteGroupPath(this, Keys.TEST_SUITE__TEST_SUITE_TEST_SUITE_GROUP_ID_FKEY, null);

        return _testSuiteGroup;
    }

    private transient TestCasePath _testCase;

    /**
     * Get the implicit to-many join path to the <code>public.test_case</code>
     * table
     */
    public TestCasePath testCase() {
        if (_testCase == null)
            _testCase = new TestCasePath(this, null, Keys.TEST_CASE__TEST_CASE_TEST_SUITE_ID_FKEY.getInverseKey());

        return _testCase;
    }

    @Override
    public TestSuite as(String alias) {
        return new TestSuite(DSL.name(alias), this);
    }

    @Override
    public TestSuite as(Name alias) {
        return new TestSuite(alias, this);
    }

    @Override
    public TestSuite as(Table<?> alias) {
        return new TestSuite(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuite rename(String name) {
        return new TestSuite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuite rename(Name name) {
        return new TestSuite(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestSuite rename(Table<?> name) {
        return new TestSuite(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestSuite where(Condition condition) {
        return new TestSuite(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestSuite where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestSuite where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestSuite where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestSuite where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestSuite where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestSuite where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestSuite where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestSuite whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestSuite whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
