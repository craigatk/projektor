/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.GitRepositoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GitRepository extends TableImpl<GitRepositoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.git_repository</code>
     */
    public static final GitRepository GIT_REPOSITORY = new GitRepository();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GitRepositoryRecord> getRecordType() {
        return GitRepositoryRecord.class;
    }

    /**
     * The column <code>public.git_repository.repo_name</code>.
     */
    public final TableField<GitRepositoryRecord, String> REPO_NAME = createField(DSL.name("repo_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.git_repository.org_name</code>.
     */
    public final TableField<GitRepositoryRecord, String> ORG_NAME = createField(DSL.name("org_name"), SQLDataType.CLOB.nullable(false), this, "");

    private GitRepository(Name alias, Table<GitRepositoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private GitRepository(Name alias, Table<GitRepositoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.git_repository</code> table reference
     */
    public GitRepository(String alias) {
        this(DSL.name(alias), GIT_REPOSITORY);
    }

    /**
     * Create an aliased <code>public.git_repository</code> table reference
     */
    public GitRepository(Name alias) {
        this(alias, GIT_REPOSITORY);
    }

    /**
     * Create a <code>public.git_repository</code> table reference
     */
    public GitRepository() {
        this(DSL.name("git_repository"), null);
    }

    public <O extends Record> GitRepository(Table<O> child, ForeignKey<O, GitRepositoryRecord> key) {
        super(child, key, GIT_REPOSITORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GIT_REPOSITORY_ORG_NAME_IDX);
    }

    @Override
    public UniqueKey<GitRepositoryRecord> getPrimaryKey() {
        return Keys.GIT_REPOSITORY_PKEY;
    }

    @Override
    public List<UniqueKey<GitRepositoryRecord>> getKeys() {
        return Arrays.<UniqueKey<GitRepositoryRecord>>asList(Keys.GIT_REPOSITORY_PKEY);
    }

    @Override
    public GitRepository as(String alias) {
        return new GitRepository(DSL.name(alias), this);
    }

    @Override
    public GitRepository as(Name alias) {
        return new GitRepository(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GitRepository rename(String name) {
        return new GitRepository(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GitRepository rename(Name name) {
        return new GitRepository(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
