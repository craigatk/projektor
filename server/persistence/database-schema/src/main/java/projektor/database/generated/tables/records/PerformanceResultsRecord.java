/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import java.math.BigDecimal;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.PerformanceResults;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PerformanceResultsRecord extends UpdatableRecordImpl<PerformanceResultsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.performance_results.id</code>.
     */
    public PerformanceResultsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.performance_results.test_run_id</code>.
     */
    public PerformanceResultsRecord setTestRunId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.test_run_id</code>.
     */
    public Long getTestRunId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.performance_results.test_run_public_id</code>.
     */
    public PerformanceResultsRecord setTestRunPublicId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.test_run_public_id</code>.
     */
    public String getTestRunPublicId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.performance_results.name</code>.
     */
    public PerformanceResultsRecord setName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.name</code>.
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.performance_results.request_count</code>.
     */
    public PerformanceResultsRecord setRequestCount(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.request_count</code>.
     */
    public Long getRequestCount() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.performance_results.requests_per_second</code>.
     */
    public PerformanceResultsRecord setRequestsPerSecond(BigDecimal value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.requests_per_second</code>.
     */
    public BigDecimal getRequestsPerSecond() {
        return (BigDecimal) get(5);
    }

    /**
     * Setter for <code>public.performance_results.average</code>.
     */
    public PerformanceResultsRecord setAverage(BigDecimal value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.average</code>.
     */
    public BigDecimal getAverage() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>public.performance_results.maximum</code>.
     */
    public PerformanceResultsRecord setMaximum(BigDecimal value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.maximum</code>.
     */
    public BigDecimal getMaximum() {
        return (BigDecimal) get(7);
    }

    /**
     * Setter for <code>public.performance_results.p95</code>.
     */
    public PerformanceResultsRecord setP95(BigDecimal value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.performance_results.p95</code>.
     */
    public BigDecimal getP95() {
        return (BigDecimal) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PerformanceResultsRecord
     */
    public PerformanceResultsRecord() {
        super(PerformanceResults.PERFORMANCE_RESULTS);
    }

    /**
     * Create a detached, initialised PerformanceResultsRecord
     */
    public PerformanceResultsRecord(Long id, Long testRunId, String testRunPublicId, String name, Long requestCount, BigDecimal requestsPerSecond, BigDecimal average, BigDecimal maximum, BigDecimal p95) {
        super(PerformanceResults.PERFORMANCE_RESULTS);

        setId(id);
        setTestRunId(testRunId);
        setTestRunPublicId(testRunPublicId);
        setName(name);
        setRequestCount(requestCount);
        setRequestsPerSecond(requestsPerSecond);
        setAverage(average);
        setMaximum(maximum);
        setP95(p95);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised PerformanceResultsRecord
     */
    public PerformanceResultsRecord(projektor.database.generated.tables.pojos.PerformanceResults value) {
        super(PerformanceResults.PERFORMANCE_RESULTS);

        if (value != null) {
            setId(value.getId());
            setTestRunId(value.getTestRunId());
            setTestRunPublicId(value.getTestRunPublicId());
            setName(value.getName());
            setRequestCount(value.getRequestCount());
            setRequestsPerSecond(value.getRequestsPerSecond());
            setAverage(value.getAverage());
            setMaximum(value.getMaximum());
            setP95(value.getP95());
            resetTouchedOnNotNull();
        }
    }
}
