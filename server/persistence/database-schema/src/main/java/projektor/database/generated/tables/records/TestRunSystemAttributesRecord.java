/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.TestRunSystemAttributes;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRunSystemAttributesRecord extends UpdatableRecordImpl<TestRunSystemAttributesRecord> implements Record2<String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>public.test_run_system_attributes.test_run_public_id</code>.
     */
    public TestRunSystemAttributesRecord setTestRunPublicId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.test_run_system_attributes.test_run_public_id</code>.
     */
    public String getTestRunPublicId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.test_run_system_attributes.pinned</code>.
     */
    public TestRunSystemAttributesRecord setPinned(Boolean value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run_system_attributes.pinned</code>.
     */
    public Boolean getPinned() {
        return (Boolean) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Boolean> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TestRunSystemAttributes.TEST_RUN_SYSTEM_ATTRIBUTES.TEST_RUN_PUBLIC_ID;
    }

    @Override
    public Field<Boolean> field2() {
        return TestRunSystemAttributes.TEST_RUN_SYSTEM_ATTRIBUTES.PINNED;
    }

    @Override
    public String component1() {
        return getTestRunPublicId();
    }

    @Override
    public Boolean component2() {
        return getPinned();
    }

    @Override
    public String value1() {
        return getTestRunPublicId();
    }

    @Override
    public Boolean value2() {
        return getPinned();
    }

    @Override
    public TestRunSystemAttributesRecord value1(String value) {
        setTestRunPublicId(value);
        return this;
    }

    @Override
    public TestRunSystemAttributesRecord value2(Boolean value) {
        setPinned(value);
        return this;
    }

    @Override
    public TestRunSystemAttributesRecord values(String value1, Boolean value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRunSystemAttributesRecord
     */
    public TestRunSystemAttributesRecord() {
        super(TestRunSystemAttributes.TEST_RUN_SYSTEM_ATTRIBUTES);
    }

    /**
     * Create a detached, initialised TestRunSystemAttributesRecord
     */
    public TestRunSystemAttributesRecord(String testRunPublicId, Boolean pinned) {
        super(TestRunSystemAttributes.TEST_RUN_SYSTEM_ATTRIBUTES);

        setTestRunPublicId(testRunPublicId);
        setPinned(pinned);
    }

    /**
     * Create a detached, initialised TestRunSystemAttributesRecord
     */
    public TestRunSystemAttributesRecord(projektor.database.generated.tables.pojos.TestRunSystemAttributes value) {
        super(TestRunSystemAttributes.TEST_RUN_SYSTEM_ATTRIBUTES);

        if (value != null) {
            setTestRunPublicId(value.getTestRunPublicId());
            setPinned(value.getPinned());
        }
    }
}
