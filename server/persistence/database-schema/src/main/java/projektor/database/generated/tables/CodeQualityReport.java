/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.CodeQualityReportRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeQualityReport extends TableImpl<CodeQualityReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.code_quality_report</code>
     */
    public static final CodeQualityReport CODE_QUALITY_REPORT = new CodeQualityReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeQualityReportRecord> getRecordType() {
        return CodeQualityReportRecord.class;
    }

    /**
     * The column <code>public.code_quality_report.id</code>.
     */
    public final TableField<CodeQualityReportRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.code_quality_report.test_run_id</code>.
     */
    public final TableField<CodeQualityReportRecord, Long> TEST_RUN_ID = createField(DSL.name("test_run_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.code_quality_report.contents</code>.
     */
    public final TableField<CodeQualityReportRecord, String> CONTENTS = createField(DSL.name("contents"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_quality_report.file_name</code>.
     */
    public final TableField<CodeQualityReportRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_quality_report.group_name</code>.
     */
    public final TableField<CodeQualityReportRecord, String> GROUP_NAME = createField(DSL.name("group_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_quality_report.idx</code>.
     */
    public final TableField<CodeQualityReportRecord, Integer> IDX = createField(DSL.name("idx"), SQLDataType.INTEGER, this, "");

    private CodeQualityReport(Name alias, Table<CodeQualityReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private CodeQualityReport(Name alias, Table<CodeQualityReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.code_quality_report</code> table reference
     */
    public CodeQualityReport(String alias) {
        this(DSL.name(alias), CODE_QUALITY_REPORT);
    }

    /**
     * Create an aliased <code>public.code_quality_report</code> table reference
     */
    public CodeQualityReport(Name alias) {
        this(alias, CODE_QUALITY_REPORT);
    }

    /**
     * Create a <code>public.code_quality_report</code> table reference
     */
    public CodeQualityReport() {
        this(DSL.name("code_quality_report"), null);
    }

    public <O extends Record> CodeQualityReport(Table<O> child, ForeignKey<O, CodeQualityReportRecord> key) {
        super(child, key, CODE_QUALITY_REPORT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<CodeQualityReportRecord, Long> getIdentity() {
        return (Identity<CodeQualityReportRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CodeQualityReportRecord> getPrimaryKey() {
        return Keys.CODE_QUALITY_REPORT_PKEY;
    }

    @Override
    public List<UniqueKey<CodeQualityReportRecord>> getKeys() {
        return Arrays.<UniqueKey<CodeQualityReportRecord>>asList(Keys.CODE_QUALITY_REPORT_PKEY);
    }

    @Override
    public List<ForeignKey<CodeQualityReportRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CodeQualityReportRecord, ?>>asList(Keys.CODE_QUALITY_REPORT__CODE_QUALITY_REPORT_TEST_RUN_ID_FKEY);
    }

    public TestRun testRun() {
        return new TestRun(this, Keys.CODE_QUALITY_REPORT__CODE_QUALITY_REPORT_TEST_RUN_ID_FKEY);
    }

    @Override
    public CodeQualityReport as(String alias) {
        return new CodeQualityReport(DSL.name(alias), this);
    }

    @Override
    public CodeQualityReport as(Name alias) {
        return new CodeQualityReport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeQualityReport rename(String name) {
        return new CodeQualityReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeQualityReport rename(Name name) {
        return new CodeQualityReport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
