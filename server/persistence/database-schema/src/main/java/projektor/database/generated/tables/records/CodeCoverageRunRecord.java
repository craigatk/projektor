/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.CodeCoverageRun;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CodeCoverageRunRecord extends UpdatableRecordImpl<CodeCoverageRunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.code_coverage_run.id</code>.
     */
    public CodeCoverageRunRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_run.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.code_coverage_run.test_run_public_id</code>.
     */
    public CodeCoverageRunRecord setTestRunPublicId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_run.test_run_public_id</code>.
     */
    public String getTestRunPublicId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CodeCoverageRunRecord
     */
    public CodeCoverageRunRecord() {
        super(CodeCoverageRun.CODE_COVERAGE_RUN);
    }

    /**
     * Create a detached, initialised CodeCoverageRunRecord
     */
    public CodeCoverageRunRecord(Long id, String testRunPublicId) {
        super(CodeCoverageRun.CODE_COVERAGE_RUN);

        setId(id);
        setTestRunPublicId(testRunPublicId);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised CodeCoverageRunRecord
     */
    public CodeCoverageRunRecord(projektor.database.generated.tables.pojos.CodeCoverageRun value) {
        super(CodeCoverageRun.CODE_COVERAGE_RUN);

        if (value != null) {
            setId(value.getId());
            setTestRunPublicId(value.getTestRunPublicId());
            resetTouchedOnNotNull();
        }
    }
}
