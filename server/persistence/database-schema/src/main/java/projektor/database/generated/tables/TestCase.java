/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.TestFailure.TestFailurePath;
import projektor.database.generated.tables.TestSuite.TestSuitePath;
import projektor.database.generated.tables.records.TestCaseRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestCase extends TableImpl<TestCaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.test_case</code>
     */
    public static final TestCase TEST_CASE = new TestCase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestCaseRecord> getRecordType() {
        return TestCaseRecord.class;
    }

    /**
     * The column <code>public.test_case.id</code>.
     */
    public final TableField<TestCaseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.test_case.test_suite_id</code>.
     */
    public final TableField<TestCaseRecord, Long> TEST_SUITE_ID = createField(DSL.name("test_suite_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.test_case.idx</code>.
     */
    public final TableField<TestCaseRecord, Integer> IDX = createField(DSL.name("idx"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.test_case.name</code>.
     */
    public final TableField<TestCaseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.test_case.package_name</code>.
     */
    public final TableField<TestCaseRecord, String> PACKAGE_NAME = createField(DSL.name("package_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_case.class_name</code>.
     */
    public final TableField<TestCaseRecord, String> CLASS_NAME = createField(DSL.name("class_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_case.duration</code>.
     */
    public final TableField<TestCaseRecord, BigDecimal> DURATION = createField(DSL.name("duration"), SQLDataType.NUMERIC(12, 3), this, "");

    /**
     * The column <code>public.test_case.passed</code>.
     */
    public final TableField<TestCaseRecord, Boolean> PASSED = createField(DSL.name("passed"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.test_case.skipped</code>.
     */
    public final TableField<TestCaseRecord, Boolean> SKIPPED = createField(DSL.name("skipped"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.test_case.system_out</code>.
     */
    public final TableField<TestCaseRecord, String> SYSTEM_OUT = createField(DSL.name("system_out"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_case.system_err</code>.
     */
    public final TableField<TestCaseRecord, String> SYSTEM_ERR = createField(DSL.name("system_err"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_case.has_system_out</code>.
     */
    public final TableField<TestCaseRecord, Boolean> HAS_SYSTEM_OUT = createField(DSL.name("has_system_out"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.test_case.has_system_err</code>.
     */
    public final TableField<TestCaseRecord, Boolean> HAS_SYSTEM_ERR = createField(DSL.name("has_system_err"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private TestCase(Name alias, Table<TestCaseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TestCase(Name alias, Table<TestCaseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.test_case</code> table reference
     */
    public TestCase(String alias) {
        this(DSL.name(alias), TEST_CASE);
    }

    /**
     * Create an aliased <code>public.test_case</code> table reference
     */
    public TestCase(Name alias) {
        this(alias, TEST_CASE);
    }

    /**
     * Create a <code>public.test_case</code> table reference
     */
    public TestCase() {
        this(DSL.name("test_case"), null);
    }

    public <O extends Record> TestCase(Table<O> path, ForeignKey<O, TestCaseRecord> childPath, InverseForeignKey<O, TestCaseRecord> parentPath) {
        super(path, childPath, parentPath, TEST_CASE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TestCasePath extends TestCase implements Path<TestCaseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TestCasePath(Table<O> path, ForeignKey<O, TestCaseRecord> childPath, InverseForeignKey<O, TestCaseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TestCasePath(Name alias, Table<TestCaseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TestCasePath as(String alias) {
            return new TestCasePath(DSL.name(alias), this);
        }

        @Override
        public TestCasePath as(Name alias) {
            return new TestCasePath(alias, this);
        }

        @Override
        public TestCasePath as(Table<?> alias) {
            return new TestCasePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TEST_CASE_DURATION, Indexes.IDX_TEST_CASE_IDX, Indexes.IDX_TEST_CASE_PASSED, Indexes.IDX_TEST_CASE_TEST_SUITE_ID);
    }

    @Override
    public Identity<TestCaseRecord, Long> getIdentity() {
        return (Identity<TestCaseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestCaseRecord> getPrimaryKey() {
        return Keys.TEST_CASE_PKEY;
    }

    @Override
    public List<ForeignKey<TestCaseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEST_CASE__TEST_CASE_TEST_SUITE_ID_FKEY);
    }

    private transient TestSuitePath _testSuite;

    /**
     * Get the implicit join path to the <code>public.test_suite</code> table.
     */
    public TestSuitePath testSuite() {
        if (_testSuite == null)
            _testSuite = new TestSuitePath(this, Keys.TEST_CASE__TEST_CASE_TEST_SUITE_ID_FKEY, null);

        return _testSuite;
    }

    private transient TestFailurePath _testFailure;

    /**
     * Get the implicit to-many join path to the
     * <code>public.test_failure</code> table
     */
    public TestFailurePath testFailure() {
        if (_testFailure == null)
            _testFailure = new TestFailurePath(this, null, Keys.TEST_FAILURE__TEST_FAILURE_TEST_CASE_ID_FKEY.getInverseKey());

        return _testFailure;
    }

    @Override
    public TestCase as(String alias) {
        return new TestCase(DSL.name(alias), this);
    }

    @Override
    public TestCase as(Name alias) {
        return new TestCase(alias, this);
    }

    @Override
    public TestCase as(Table<?> alias) {
        return new TestCase(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCase rename(String name) {
        return new TestCase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCase rename(Name name) {
        return new TestCase(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestCase rename(Table<?> name) {
        return new TestCase(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestCase where(Condition condition) {
        return new TestCase(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestCase where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestCase where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestCase where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestCase where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestCase where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestCase where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestCase where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestCase whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestCase whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
