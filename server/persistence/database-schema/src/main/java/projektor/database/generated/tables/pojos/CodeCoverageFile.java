/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.pojos;


import java.io.Serializable;
import java.util.Arrays;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeCoverageFile implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long      id;
    private Long      codeCoverageRunId;
    private Long      codeCoverageGroupId;
    private Long      statsId;
    private String    directoryName;
    private String    fileName;
    private Integer[] missedLines;
    private Integer[] partialLines;
    private String    filePath;

    public CodeCoverageFile() {}

    public CodeCoverageFile(CodeCoverageFile value) {
        this.id = value.id;
        this.codeCoverageRunId = value.codeCoverageRunId;
        this.codeCoverageGroupId = value.codeCoverageGroupId;
        this.statsId = value.statsId;
        this.directoryName = value.directoryName;
        this.fileName = value.fileName;
        this.missedLines = value.missedLines;
        this.partialLines = value.partialLines;
        this.filePath = value.filePath;
    }

    public CodeCoverageFile(
        Long      id,
        Long      codeCoverageRunId,
        Long      codeCoverageGroupId,
        Long      statsId,
        String    directoryName,
        String    fileName,
        Integer[] missedLines,
        Integer[] partialLines,
        String    filePath
    ) {
        this.id = id;
        this.codeCoverageRunId = codeCoverageRunId;
        this.codeCoverageGroupId = codeCoverageGroupId;
        this.statsId = statsId;
        this.directoryName = directoryName;
        this.fileName = fileName;
        this.missedLines = missedLines;
        this.partialLines = partialLines;
        this.filePath = filePath;
    }

    /**
     * Getter for <code>public.code_coverage_file.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.code_coverage_file.id</code>.
     */
    public CodeCoverageFile setId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.code_coverage_run_id</code>.
     */
    public Long getCodeCoverageRunId() {
        return this.codeCoverageRunId;
    }

    /**
     * Setter for <code>public.code_coverage_file.code_coverage_run_id</code>.
     */
    public CodeCoverageFile setCodeCoverageRunId(Long codeCoverageRunId) {
        this.codeCoverageRunId = codeCoverageRunId;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.code_coverage_group_id</code>.
     */
    public Long getCodeCoverageGroupId() {
        return this.codeCoverageGroupId;
    }

    /**
     * Setter for <code>public.code_coverage_file.code_coverage_group_id</code>.
     */
    public CodeCoverageFile setCodeCoverageGroupId(Long codeCoverageGroupId) {
        this.codeCoverageGroupId = codeCoverageGroupId;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.stats_id</code>.
     */
    public Long getStatsId() {
        return this.statsId;
    }

    /**
     * Setter for <code>public.code_coverage_file.stats_id</code>.
     */
    public CodeCoverageFile setStatsId(Long statsId) {
        this.statsId = statsId;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.directory_name</code>.
     */
    public String getDirectoryName() {
        return this.directoryName;
    }

    /**
     * Setter for <code>public.code_coverage_file.directory_name</code>.
     */
    public CodeCoverageFile setDirectoryName(String directoryName) {
        this.directoryName = directoryName;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.file_name</code>.
     */
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Setter for <code>public.code_coverage_file.file_name</code>.
     */
    public CodeCoverageFile setFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.missed_lines</code>.
     */
    public Integer[] getMissedLines() {
        return this.missedLines;
    }

    /**
     * Setter for <code>public.code_coverage_file.missed_lines</code>.
     */
    public CodeCoverageFile setMissedLines(Integer[] missedLines) {
        this.missedLines = missedLines;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.partial_lines</code>.
     */
    public Integer[] getPartialLines() {
        return this.partialLines;
    }

    /**
     * Setter for <code>public.code_coverage_file.partial_lines</code>.
     */
    public CodeCoverageFile setPartialLines(Integer[] partialLines) {
        this.partialLines = partialLines;
        return this;
    }

    /**
     * Getter for <code>public.code_coverage_file.file_path</code>.
     */
    public String getFilePath() {
        return this.filePath;
    }

    /**
     * Setter for <code>public.code_coverage_file.file_path</code>.
     */
    public CodeCoverageFile setFilePath(String filePath) {
        this.filePath = filePath;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final CodeCoverageFile other = (CodeCoverageFile) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (codeCoverageRunId == null) {
            if (other.codeCoverageRunId != null)
                return false;
        }
        else if (!codeCoverageRunId.equals(other.codeCoverageRunId))
            return false;
        if (codeCoverageGroupId == null) {
            if (other.codeCoverageGroupId != null)
                return false;
        }
        else if (!codeCoverageGroupId.equals(other.codeCoverageGroupId))
            return false;
        if (statsId == null) {
            if (other.statsId != null)
                return false;
        }
        else if (!statsId.equals(other.statsId))
            return false;
        if (directoryName == null) {
            if (other.directoryName != null)
                return false;
        }
        else if (!directoryName.equals(other.directoryName))
            return false;
        if (fileName == null) {
            if (other.fileName != null)
                return false;
        }
        else if (!fileName.equals(other.fileName))
            return false;
        if (missedLines == null) {
            if (other.missedLines != null)
                return false;
        }
        else if (!Arrays.equals(missedLines, other.missedLines))
            return false;
        if (partialLines == null) {
            if (other.partialLines != null)
                return false;
        }
        else if (!Arrays.equals(partialLines, other.partialLines))
            return false;
        if (filePath == null) {
            if (other.filePath != null)
                return false;
        }
        else if (!filePath.equals(other.filePath))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.codeCoverageRunId == null) ? 0 : this.codeCoverageRunId.hashCode());
        result = prime * result + ((this.codeCoverageGroupId == null) ? 0 : this.codeCoverageGroupId.hashCode());
        result = prime * result + ((this.statsId == null) ? 0 : this.statsId.hashCode());
        result = prime * result + ((this.directoryName == null) ? 0 : this.directoryName.hashCode());
        result = prime * result + ((this.fileName == null) ? 0 : this.fileName.hashCode());
        result = prime * result + ((this.missedLines == null) ? 0 : Arrays.hashCode(this.missedLines));
        result = prime * result + ((this.partialLines == null) ? 0 : Arrays.hashCode(this.partialLines));
        result = prime * result + ((this.filePath == null) ? 0 : this.filePath.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CodeCoverageFile (");

        sb.append(id);
        sb.append(", ").append(codeCoverageRunId);
        sb.append(", ").append(codeCoverageGroupId);
        sb.append(", ").append(statsId);
        sb.append(", ").append(directoryName);
        sb.append(", ").append(fileName);
        sb.append(", ").append(Arrays.toString(missedLines));
        sb.append(", ").append(Arrays.toString(partialLines));
        sb.append(", ").append(filePath);

        sb.append(")");
        return sb.toString();
    }
}
