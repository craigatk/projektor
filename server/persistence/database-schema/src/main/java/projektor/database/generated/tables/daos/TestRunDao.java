/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.daos;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import projektor.database.generated.tables.TestRun;
import projektor.database.generated.tables.records.TestRunRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRunDao extends DAOImpl<TestRunRecord, projektor.database.generated.tables.pojos.TestRun, Long> {

    /**
     * Create a new TestRunDao without any configuration
     */
    public TestRunDao() {
        super(TestRun.TEST_RUN, projektor.database.generated.tables.pojos.TestRun.class);
    }

    /**
     * Create a new TestRunDao with an attached configuration
     */
    public TestRunDao(Configuration configuration) {
        super(TestRun.TEST_RUN, projektor.database.generated.tables.pojos.TestRun.class, configuration);
    }

    @Override
    public Long getId(projektor.database.generated.tables.pojos.TestRun object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchById(Long... values) {
        return fetch(TestRun.TEST_RUN.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public projektor.database.generated.tables.pojos.TestRun fetchOneById(Long value) {
        return fetchOne(TestRun.TEST_RUN.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<projektor.database.generated.tables.pojos.TestRun> fetchOptionalById(Long value) {
        return fetchOptional(TestRun.TEST_RUN.ID, value);
    }

    /**
     * Fetch records that have <code>public_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfPublicId(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.PUBLIC_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>public_id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByPublicId(String... values) {
        return fetch(TestRun.TEST_RUN.PUBLIC_ID, values);
    }

    /**
     * Fetch a unique record that has <code>public_id = value</code>
     */
    public projektor.database.generated.tables.pojos.TestRun fetchOneByPublicId(String value) {
        return fetchOne(TestRun.TEST_RUN.PUBLIC_ID, value);
    }

    /**
     * Fetch a unique record that has <code>public_id = value</code>
     */
    public Optional<projektor.database.generated.tables.pojos.TestRun> fetchOptionalByPublicId(String value) {
        return fetchOptional(TestRun.TEST_RUN.PUBLIC_ID, value);
    }

    /**
     * Fetch records that have <code>total_test_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfTotalTestCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.TOTAL_TEST_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>total_test_count IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByTotalTestCount(Integer... values) {
        return fetch(TestRun.TEST_RUN.TOTAL_TEST_COUNT, values);
    }

    /**
     * Fetch records that have <code>total_passing_count BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfTotalPassingCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.TOTAL_PASSING_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>total_passing_count IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByTotalPassingCount(Integer... values) {
        return fetch(TestRun.TEST_RUN.TOTAL_PASSING_COUNT, values);
    }

    /**
     * Fetch records that have <code>total_skipped_count BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfTotalSkippedCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.TOTAL_SKIPPED_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>total_skipped_count IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByTotalSkippedCount(Integer... values) {
        return fetch(TestRun.TEST_RUN.TOTAL_SKIPPED_COUNT, values);
    }

    /**
     * Fetch records that have <code>total_failure_count BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfTotalFailureCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.TOTAL_FAILURE_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>total_failure_count IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByTotalFailureCount(Integer... values) {
        return fetch(TestRun.TEST_RUN.TOTAL_FAILURE_COUNT, values);
    }

    /**
     * Fetch records that have <code>passed BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfPassed(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.PASSED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passed IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByPassed(Boolean... values) {
        return fetch(TestRun.TEST_RUN.PASSED, values);
    }

    /**
     * Fetch records that have <code>cumulative_duration BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfCumulativeDuration(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.CUMULATIVE_DURATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cumulative_duration IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByCumulativeDuration(BigDecimal... values) {
        return fetch(TestRun.TEST_RUN.CUMULATIVE_DURATION, values);
    }

    /**
     * Fetch records that have <code>average_duration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfAverageDuration(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.AVERAGE_DURATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>average_duration IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByAverageDuration(BigDecimal... values) {
        return fetch(TestRun.TEST_RUN.AVERAGE_DURATION, values);
    }

    /**
     * Fetch records that have <code>slowest_test_case_duration BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfSlowestTestCaseDuration(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.SLOWEST_TEST_CASE_DURATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>slowest_test_case_duration IN
     * (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchBySlowestTestCaseDuration(BigDecimal... values) {
        return fetch(TestRun.TEST_RUN.SLOWEST_TEST_CASE_DURATION, values);
    }

    /**
     * Fetch records that have <code>created_timestamp BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfCreatedTimestamp(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.CREATED_TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_timestamp IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByCreatedTimestamp(LocalDateTime... values) {
        return fetch(TestRun.TEST_RUN.CREATED_TIMESTAMP, values);
    }

    /**
     * Fetch records that have <code>wall_clock_duration BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchRangeOfWallClockDuration(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(TestRun.TEST_RUN.WALL_CLOCK_DURATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>wall_clock_duration IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestRun> fetchByWallClockDuration(BigDecimal... values) {
        return fetch(TestRun.TEST_RUN.WALL_CLOCK_DURATION, values);
    }
}
