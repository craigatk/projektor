/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.ResultsProcessing;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResultsProcessingRecord extends UpdatableRecordImpl<ResultsProcessingRecord> implements Record4<String, String, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.results_processing.public_id</code>.
     */
    public ResultsProcessingRecord setPublicId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing.public_id</code>.
     */
    public String getPublicId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.results_processing.status</code>.
     */
    public ResultsProcessingRecord setStatus(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing.status</code>.
     */
    public String getStatus() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.results_processing.error_message</code>.
     */
    public ResultsProcessingRecord setErrorMessage(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing.error_message</code>.
     */
    public String getErrorMessage() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.results_processing.created_timestamp</code>.
     */
    public ResultsProcessingRecord setCreatedTimestamp(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing.created_timestamp</code>.
     */
    public LocalDateTime getCreatedTimestamp() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ResultsProcessing.RESULTS_PROCESSING.PUBLIC_ID;
    }

    @Override
    public Field<String> field2() {
        return ResultsProcessing.RESULTS_PROCESSING.STATUS;
    }

    @Override
    public Field<String> field3() {
        return ResultsProcessing.RESULTS_PROCESSING.ERROR_MESSAGE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return ResultsProcessing.RESULTS_PROCESSING.CREATED_TIMESTAMP;
    }

    @Override
    public String component1() {
        return getPublicId();
    }

    @Override
    public String component2() {
        return getStatus();
    }

    @Override
    public String component3() {
        return getErrorMessage();
    }

    @Override
    public LocalDateTime component4() {
        return getCreatedTimestamp();
    }

    @Override
    public String value1() {
        return getPublicId();
    }

    @Override
    public String value2() {
        return getStatus();
    }

    @Override
    public String value3() {
        return getErrorMessage();
    }

    @Override
    public LocalDateTime value4() {
        return getCreatedTimestamp();
    }

    @Override
    public ResultsProcessingRecord value1(String value) {
        setPublicId(value);
        return this;
    }

    @Override
    public ResultsProcessingRecord value2(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public ResultsProcessingRecord value3(String value) {
        setErrorMessage(value);
        return this;
    }

    @Override
    public ResultsProcessingRecord value4(LocalDateTime value) {
        setCreatedTimestamp(value);
        return this;
    }

    @Override
    public ResultsProcessingRecord values(String value1, String value2, String value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResultsProcessingRecord
     */
    public ResultsProcessingRecord() {
        super(ResultsProcessing.RESULTS_PROCESSING);
    }

    /**
     * Create a detached, initialised ResultsProcessingRecord
     */
    public ResultsProcessingRecord(String publicId, String status, String errorMessage, LocalDateTime createdTimestamp) {
        super(ResultsProcessing.RESULTS_PROCESSING);

        setPublicId(publicId);
        setStatus(status);
        setErrorMessage(errorMessage);
        setCreatedTimestamp(createdTimestamp);
    }
}
