/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.daos;


import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import projektor.database.generated.tables.TestSuiteGroup;
import projektor.database.generated.tables.records.TestSuiteGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestSuiteGroupDao extends DAOImpl<TestSuiteGroupRecord, projektor.database.generated.tables.pojos.TestSuiteGroup, Long> {

    /**
     * Create a new TestSuiteGroupDao without any configuration
     */
    public TestSuiteGroupDao() {
        super(TestSuiteGroup.TEST_SUITE_GROUP, projektor.database.generated.tables.pojos.TestSuiteGroup.class);
    }

    /**
     * Create a new TestSuiteGroupDao with an attached configuration
     */
    public TestSuiteGroupDao(Configuration configuration) {
        super(TestSuiteGroup.TEST_SUITE_GROUP, projektor.database.generated.tables.pojos.TestSuiteGroup.class, configuration);
    }

    @Override
    public Long getId(projektor.database.generated.tables.pojos.TestSuiteGroup object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestSuiteGroup.TEST_SUITE_GROUP.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchById(Long... values) {
        return fetch(TestSuiteGroup.TEST_SUITE_GROUP.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public projektor.database.generated.tables.pojos.TestSuiteGroup fetchOneById(Long value) {
        return fetchOne(TestSuiteGroup.TEST_SUITE_GROUP.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchOptionalById(Long value) {
        return fetchOptional(TestSuiteGroup.TEST_SUITE_GROUP.ID, value);
    }

    /**
     * Fetch records that have <code>test_run_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchRangeOfTestRunId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(TestSuiteGroup.TEST_SUITE_GROUP.TEST_RUN_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>test_run_id IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchByTestRunId(Long... values) {
        return fetch(TestSuiteGroup.TEST_SUITE_GROUP.TEST_RUN_ID, values);
    }

    /**
     * Fetch records that have <code>group_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchRangeOfGroupName(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteGroup.TEST_SUITE_GROUP.GROUP_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_name IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchByGroupName(String... values) {
        return fetch(TestSuiteGroup.TEST_SUITE_GROUP.GROUP_NAME, values);
    }

    /**
     * Fetch records that have <code>group_label BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchRangeOfGroupLabel(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteGroup.TEST_SUITE_GROUP.GROUP_LABEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group_label IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchByGroupLabel(String... values) {
        return fetch(TestSuiteGroup.TEST_SUITE_GROUP.GROUP_LABEL, values);
    }

    /**
     * Fetch records that have <code>directory BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchRangeOfDirectory(String lowerInclusive, String upperInclusive) {
        return fetchRange(TestSuiteGroup.TEST_SUITE_GROUP.DIRECTORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>directory IN (values)</code>
     */
    public List<projektor.database.generated.tables.pojos.TestSuiteGroup> fetchByDirectory(String... values) {
        return fetch(TestSuiteGroup.TEST_SUITE_GROUP.DIRECTORY, values);
    }
}
