/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.ResultsProcessingFailure;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ResultsProcessingFailureRecord extends UpdatableRecordImpl<ResultsProcessingFailureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.results_processing_failure.public_id</code>.
     */
    public ResultsProcessingFailureRecord setPublicId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.public_id</code>.
     */
    public String getPublicId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.results_processing_failure.body</code>.
     */
    public ResultsProcessingFailureRecord setBody(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.body</code>.
     */
    public String getBody() {
        return (String) get(1);
    }

    /**
     * Setter for
     * <code>public.results_processing_failure.created_timestamp</code>.
     */
    public ResultsProcessingFailureRecord setCreatedTimestamp(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.results_processing_failure.created_timestamp</code>.
     */
    public LocalDateTime getCreatedTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for
     * <code>public.results_processing_failure.failure_message</code>.
     */
    public ResultsProcessingFailureRecord setFailureMessage(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for
     * <code>public.results_processing_failure.failure_message</code>.
     */
    public String getFailureMessage() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.results_processing_failure.failure_type</code>.
     */
    public ResultsProcessingFailureRecord setFailureType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.failure_type</code>.
     */
    public String getFailureType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.results_processing_failure.body_type</code>.
     */
    public ResultsProcessingFailureRecord setBodyType(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.body_type</code>.
     */
    public String getBodyType() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResultsProcessingFailureRecord
     */
    public ResultsProcessingFailureRecord() {
        super(ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE);
    }

    /**
     * Create a detached, initialised ResultsProcessingFailureRecord
     */
    public ResultsProcessingFailureRecord(String publicId, String body, LocalDateTime createdTimestamp, String failureMessage, String failureType, String bodyType) {
        super(ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE);

        setPublicId(publicId);
        setBody(body);
        setCreatedTimestamp(createdTimestamp);
        setFailureMessage(failureMessage);
        setFailureType(failureType);
        setBodyType(bodyType);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised ResultsProcessingFailureRecord
     */
    public ResultsProcessingFailureRecord(projektor.database.generated.tables.pojos.ResultsProcessingFailure value) {
        super(ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE);

        if (value != null) {
            setPublicId(value.getPublicId());
            setBody(value.getBody());
            setCreatedTimestamp(value.getCreatedTimestamp());
            setFailureMessage(value.getFailureMessage());
            setFailureType(value.getFailureType());
            setBodyType(value.getBodyType());
            resetTouchedOnNotNull();
        }
    }
}
