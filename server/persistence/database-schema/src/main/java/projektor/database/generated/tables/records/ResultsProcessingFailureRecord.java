/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.ResultsProcessingFailure;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResultsProcessingFailureRecord extends UpdatableRecordImpl<ResultsProcessingFailureRecord> implements Record6<String, String, LocalDateTime, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.results_processing_failure.public_id</code>.
     */
    public ResultsProcessingFailureRecord setPublicId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.public_id</code>.
     */
    public String getPublicId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.results_processing_failure.body</code>.
     */
    public ResultsProcessingFailureRecord setBody(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.body</code>.
     */
    public String getBody() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.results_processing_failure.created_timestamp</code>.
     */
    public ResultsProcessingFailureRecord setCreatedTimestamp(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.created_timestamp</code>.
     */
    public LocalDateTime getCreatedTimestamp() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>public.results_processing_failure.failure_message</code>.
     */
    public ResultsProcessingFailureRecord setFailureMessage(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.failure_message</code>.
     */
    public String getFailureMessage() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.results_processing_failure.failure_type</code>.
     */
    public ResultsProcessingFailureRecord setFailureType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.failure_type</code>.
     */
    public String getFailureType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.results_processing_failure.body_type</code>.
     */
    public ResultsProcessingFailureRecord setBodyType(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.results_processing_failure.body_type</code>.
     */
    public String getBodyType() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, LocalDateTime, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<String, String, LocalDateTime, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE.PUBLIC_ID;
    }

    @Override
    public Field<String> field2() {
        return ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE.BODY;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE.CREATED_TIMESTAMP;
    }

    @Override
    public Field<String> field4() {
        return ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE.FAILURE_MESSAGE;
    }

    @Override
    public Field<String> field5() {
        return ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE.FAILURE_TYPE;
    }

    @Override
    public Field<String> field6() {
        return ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE.BODY_TYPE;
    }

    @Override
    public String component1() {
        return getPublicId();
    }

    @Override
    public String component2() {
        return getBody();
    }

    @Override
    public LocalDateTime component3() {
        return getCreatedTimestamp();
    }

    @Override
    public String component4() {
        return getFailureMessage();
    }

    @Override
    public String component5() {
        return getFailureType();
    }

    @Override
    public String component6() {
        return getBodyType();
    }

    @Override
    public String value1() {
        return getPublicId();
    }

    @Override
    public String value2() {
        return getBody();
    }

    @Override
    public LocalDateTime value3() {
        return getCreatedTimestamp();
    }

    @Override
    public String value4() {
        return getFailureMessage();
    }

    @Override
    public String value5() {
        return getFailureType();
    }

    @Override
    public String value6() {
        return getBodyType();
    }

    @Override
    public ResultsProcessingFailureRecord value1(String value) {
        setPublicId(value);
        return this;
    }

    @Override
    public ResultsProcessingFailureRecord value2(String value) {
        setBody(value);
        return this;
    }

    @Override
    public ResultsProcessingFailureRecord value3(LocalDateTime value) {
        setCreatedTimestamp(value);
        return this;
    }

    @Override
    public ResultsProcessingFailureRecord value4(String value) {
        setFailureMessage(value);
        return this;
    }

    @Override
    public ResultsProcessingFailureRecord value5(String value) {
        setFailureType(value);
        return this;
    }

    @Override
    public ResultsProcessingFailureRecord value6(String value) {
        setBodyType(value);
        return this;
    }

    @Override
    public ResultsProcessingFailureRecord values(String value1, String value2, LocalDateTime value3, String value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResultsProcessingFailureRecord
     */
    public ResultsProcessingFailureRecord() {
        super(ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE);
    }

    /**
     * Create a detached, initialised ResultsProcessingFailureRecord
     */
    public ResultsProcessingFailureRecord(String publicId, String body, LocalDateTime createdTimestamp, String failureMessage, String failureType, String bodyType) {
        super(ResultsProcessingFailure.RESULTS_PROCESSING_FAILURE);

        setPublicId(publicId);
        setBody(body);
        setCreatedTimestamp(createdTimestamp);
        setFailureMessage(failureMessage);
        setFailureType(failureType);
        setBodyType(bodyType);
    }
}
