/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.TestFailure;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestFailureRecord extends UpdatableRecordImpl<TestFailureRecord> implements Record5<Long, Long, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.test_failure.id</code>.
     */
    public TestFailureRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.test_failure.test_case_id</code>.
     */
    public TestFailureRecord setTestCaseId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.test_case_id</code>.
     */
    public Long getTestCaseId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.test_failure.failure_message</code>.
     */
    public TestFailureRecord setFailureMessage(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.failure_message</code>.
     */
    public String getFailureMessage() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.test_failure.failure_type</code>.
     */
    public TestFailureRecord setFailureType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.failure_type</code>.
     */
    public String getFailureType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.test_failure.failure_text</code>.
     */
    public TestFailureRecord setFailureText(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.failure_text</code>.
     */
    public String getFailureText() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Long, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return TestFailure.TEST_FAILURE.ID;
    }

    @Override
    public Field<Long> field2() {
        return TestFailure.TEST_FAILURE.TEST_CASE_ID;
    }

    @Override
    public Field<String> field3() {
        return TestFailure.TEST_FAILURE.FAILURE_MESSAGE;
    }

    @Override
    public Field<String> field4() {
        return TestFailure.TEST_FAILURE.FAILURE_TYPE;
    }

    @Override
    public Field<String> field5() {
        return TestFailure.TEST_FAILURE.FAILURE_TEXT;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getTestCaseId();
    }

    @Override
    public String component3() {
        return getFailureMessage();
    }

    @Override
    public String component4() {
        return getFailureType();
    }

    @Override
    public String component5() {
        return getFailureText();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getTestCaseId();
    }

    @Override
    public String value3() {
        return getFailureMessage();
    }

    @Override
    public String value4() {
        return getFailureType();
    }

    @Override
    public String value5() {
        return getFailureText();
    }

    @Override
    public TestFailureRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TestFailureRecord value2(Long value) {
        setTestCaseId(value);
        return this;
    }

    @Override
    public TestFailureRecord value3(String value) {
        setFailureMessage(value);
        return this;
    }

    @Override
    public TestFailureRecord value4(String value) {
        setFailureType(value);
        return this;
    }

    @Override
    public TestFailureRecord value5(String value) {
        setFailureText(value);
        return this;
    }

    @Override
    public TestFailureRecord values(Long value1, Long value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestFailureRecord
     */
    public TestFailureRecord() {
        super(TestFailure.TEST_FAILURE);
    }

    /**
     * Create a detached, initialised TestFailureRecord
     */
    public TestFailureRecord(Long id, Long testCaseId, String failureMessage, String failureType, String failureText) {
        super(TestFailure.TEST_FAILURE);

        setId(id);
        setTestCaseId(testCaseId);
        setFailureMessage(failureMessage);
        setFailureType(failureType);
        setFailureText(failureText);
    }
}
