/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.TestFailure;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestFailureRecord extends UpdatableRecordImpl<TestFailureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.test_failure.id</code>.
     */
    public TestFailureRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.test_failure.test_case_id</code>.
     */
    public TestFailureRecord setTestCaseId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.test_case_id</code>.
     */
    public Long getTestCaseId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.test_failure.failure_message</code>.
     */
    public TestFailureRecord setFailureMessage(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.failure_message</code>.
     */
    public String getFailureMessage() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.test_failure.failure_type</code>.
     */
    public TestFailureRecord setFailureType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.failure_type</code>.
     */
    public String getFailureType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.test_failure.failure_text</code>.
     */
    public TestFailureRecord setFailureText(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.test_failure.failure_text</code>.
     */
    public String getFailureText() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestFailureRecord
     */
    public TestFailureRecord() {
        super(TestFailure.TEST_FAILURE);
    }

    /**
     * Create a detached, initialised TestFailureRecord
     */
    public TestFailureRecord(Long id, Long testCaseId, String failureMessage, String failureType, String failureText) {
        super(TestFailure.TEST_FAILURE);

        setId(id);
        setTestCaseId(testCaseId);
        setFailureMessage(failureMessage);
        setFailureType(failureType);
        setFailureText(failureText);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised TestFailureRecord
     */
    public TestFailureRecord(projektor.database.generated.tables.pojos.TestFailure value) {
        super(TestFailure.TEST_FAILURE);

        if (value != null) {
            setId(value.getId());
            setTestCaseId(value.getTestCaseId());
            setFailureMessage(value.getFailureMessage());
            setFailureType(value.getFailureType());
            setFailureText(value.getFailureText());
            resetTouchedOnNotNull();
        }
    }
}
