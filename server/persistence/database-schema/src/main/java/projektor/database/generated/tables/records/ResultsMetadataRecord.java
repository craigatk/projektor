/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.ResultsMetadata;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResultsMetadataRecord extends UpdatableRecordImpl<ResultsMetadataRecord> implements Record3<Long, Long, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.results_metadata.id</code>.
     */
    public ResultsMetadataRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.results_metadata.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.results_metadata.test_run_id</code>.
     */
    public ResultsMetadataRecord setTestRunId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.results_metadata.test_run_id</code>.
     */
    public Long getTestRunId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.results_metadata.ci</code>.
     */
    public ResultsMetadataRecord setCi(Boolean value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.results_metadata.ci</code>.
     */
    public Boolean getCi() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ResultsMetadata.RESULTS_METADATA.ID;
    }

    @Override
    public Field<Long> field2() {
        return ResultsMetadata.RESULTS_METADATA.TEST_RUN_ID;
    }

    @Override
    public Field<Boolean> field3() {
        return ResultsMetadata.RESULTS_METADATA.CI;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getTestRunId();
    }

    @Override
    public Boolean component3() {
        return getCi();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getTestRunId();
    }

    @Override
    public Boolean value3() {
        return getCi();
    }

    @Override
    public ResultsMetadataRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ResultsMetadataRecord value2(Long value) {
        setTestRunId(value);
        return this;
    }

    @Override
    public ResultsMetadataRecord value3(Boolean value) {
        setCi(value);
        return this;
    }

    @Override
    public ResultsMetadataRecord values(Long value1, Long value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ResultsMetadataRecord
     */
    public ResultsMetadataRecord() {
        super(ResultsMetadata.RESULTS_METADATA);
    }

    /**
     * Create a detached, initialised ResultsMetadataRecord
     */
    public ResultsMetadataRecord(Long id, Long testRunId, Boolean ci) {
        super(ResultsMetadata.RESULTS_METADATA);

        setId(id);
        setTestRunId(testRunId);
        setCi(ci);
    }
}
