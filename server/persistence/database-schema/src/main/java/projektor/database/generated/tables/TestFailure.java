/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.TestCase.TestCasePath;
import projektor.database.generated.tables.records.TestFailureRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestFailure extends TableImpl<TestFailureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.test_failure</code>
     */
    public static final TestFailure TEST_FAILURE = new TestFailure();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestFailureRecord> getRecordType() {
        return TestFailureRecord.class;
    }

    /**
     * The column <code>public.test_failure.id</code>.
     */
    public final TableField<TestFailureRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.test_failure.test_case_id</code>.
     */
    public final TableField<TestFailureRecord, Long> TEST_CASE_ID = createField(DSL.name("test_case_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.test_failure.failure_message</code>.
     */
    public final TableField<TestFailureRecord, String> FAILURE_MESSAGE = createField(DSL.name("failure_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_failure.failure_type</code>.
     */
    public final TableField<TestFailureRecord, String> FAILURE_TYPE = createField(DSL.name("failure_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.test_failure.failure_text</code>.
     */
    public final TableField<TestFailureRecord, String> FAILURE_TEXT = createField(DSL.name("failure_text"), SQLDataType.CLOB, this, "");

    private TestFailure(Name alias, Table<TestFailureRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TestFailure(Name alias, Table<TestFailureRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.test_failure</code> table reference
     */
    public TestFailure(String alias) {
        this(DSL.name(alias), TEST_FAILURE);
    }

    /**
     * Create an aliased <code>public.test_failure</code> table reference
     */
    public TestFailure(Name alias) {
        this(alias, TEST_FAILURE);
    }

    /**
     * Create a <code>public.test_failure</code> table reference
     */
    public TestFailure() {
        this(DSL.name("test_failure"), null);
    }

    public <O extends Record> TestFailure(Table<O> path, ForeignKey<O, TestFailureRecord> childPath, InverseForeignKey<O, TestFailureRecord> parentPath) {
        super(path, childPath, parentPath, TEST_FAILURE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TestFailurePath extends TestFailure implements Path<TestFailureRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TestFailurePath(Table<O> path, ForeignKey<O, TestFailureRecord> childPath, InverseForeignKey<O, TestFailureRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TestFailurePath(Name alias, Table<TestFailureRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TestFailurePath as(String alias) {
            return new TestFailurePath(DSL.name(alias), this);
        }

        @Override
        public TestFailurePath as(Name alias) {
            return new TestFailurePath(alias, this);
        }

        @Override
        public TestFailurePath as(Table<?> alias) {
            return new TestFailurePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TEST_FAILURE_TEST_CASE_ID);
    }

    @Override
    public Identity<TestFailureRecord, Long> getIdentity() {
        return (Identity<TestFailureRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestFailureRecord> getPrimaryKey() {
        return Keys.TEST_FAILURE_PKEY;
    }

    @Override
    public List<ForeignKey<TestFailureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TEST_FAILURE__TEST_FAILURE_TEST_CASE_ID_FKEY);
    }

    private transient TestCasePath _testCase;

    /**
     * Get the implicit join path to the <code>public.test_case</code> table.
     */
    public TestCasePath testCase() {
        if (_testCase == null)
            _testCase = new TestCasePath(this, Keys.TEST_FAILURE__TEST_FAILURE_TEST_CASE_ID_FKEY, null);

        return _testCase;
    }

    @Override
    public TestFailure as(String alias) {
        return new TestFailure(DSL.name(alias), this);
    }

    @Override
    public TestFailure as(Name alias) {
        return new TestFailure(alias, this);
    }

    @Override
    public TestFailure as(Table<?> alias) {
        return new TestFailure(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TestFailure rename(String name) {
        return new TestFailure(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestFailure rename(Name name) {
        return new TestFailure(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TestFailure rename(Table<?> name) {
        return new TestFailure(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestFailure where(Condition condition) {
        return new TestFailure(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestFailure where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestFailure where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestFailure where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestFailure where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestFailure where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestFailure where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TestFailure where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestFailure whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TestFailure whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
