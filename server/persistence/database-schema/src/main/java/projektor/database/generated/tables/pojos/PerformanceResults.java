/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PerformanceResults implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long       id;
    private Long       testRunId;
    private String     testRunPublicId;
    private String     name;
    private Long       requestCount;
    private BigDecimal requestsPerSecond;
    private BigDecimal average;
    private BigDecimal maximum;
    private BigDecimal p95;

    public PerformanceResults() {}

    public PerformanceResults(PerformanceResults value) {
        this.id = value.id;
        this.testRunId = value.testRunId;
        this.testRunPublicId = value.testRunPublicId;
        this.name = value.name;
        this.requestCount = value.requestCount;
        this.requestsPerSecond = value.requestsPerSecond;
        this.average = value.average;
        this.maximum = value.maximum;
        this.p95 = value.p95;
    }

    public PerformanceResults(
        Long       id,
        Long       testRunId,
        String     testRunPublicId,
        String     name,
        Long       requestCount,
        BigDecimal requestsPerSecond,
        BigDecimal average,
        BigDecimal maximum,
        BigDecimal p95
    ) {
        this.id = id;
        this.testRunId = testRunId;
        this.testRunPublicId = testRunPublicId;
        this.name = name;
        this.requestCount = requestCount;
        this.requestsPerSecond = requestsPerSecond;
        this.average = average;
        this.maximum = maximum;
        this.p95 = p95;
    }

    /**
     * Getter for <code>public.performance_results.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.performance_results.id</code>.
     */
    public PerformanceResults setId(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.test_run_id</code>.
     */
    public Long getTestRunId() {
        return this.testRunId;
    }

    /**
     * Setter for <code>public.performance_results.test_run_id</code>.
     */
    public PerformanceResults setTestRunId(Long testRunId) {
        this.testRunId = testRunId;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.test_run_public_id</code>.
     */
    public String getTestRunPublicId() {
        return this.testRunPublicId;
    }

    /**
     * Setter for <code>public.performance_results.test_run_public_id</code>.
     */
    public PerformanceResults setTestRunPublicId(String testRunPublicId) {
        this.testRunPublicId = testRunPublicId;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>public.performance_results.name</code>.
     */
    public PerformanceResults setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.request_count</code>.
     */
    public Long getRequestCount() {
        return this.requestCount;
    }

    /**
     * Setter for <code>public.performance_results.request_count</code>.
     */
    public PerformanceResults setRequestCount(Long requestCount) {
        this.requestCount = requestCount;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.requests_per_second</code>.
     */
    public BigDecimal getRequestsPerSecond() {
        return this.requestsPerSecond;
    }

    /**
     * Setter for <code>public.performance_results.requests_per_second</code>.
     */
    public PerformanceResults setRequestsPerSecond(BigDecimal requestsPerSecond) {
        this.requestsPerSecond = requestsPerSecond;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.average</code>.
     */
    public BigDecimal getAverage() {
        return this.average;
    }

    /**
     * Setter for <code>public.performance_results.average</code>.
     */
    public PerformanceResults setAverage(BigDecimal average) {
        this.average = average;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.maximum</code>.
     */
    public BigDecimal getMaximum() {
        return this.maximum;
    }

    /**
     * Setter for <code>public.performance_results.maximum</code>.
     */
    public PerformanceResults setMaximum(BigDecimal maximum) {
        this.maximum = maximum;
        return this;
    }

    /**
     * Getter for <code>public.performance_results.p95</code>.
     */
    public BigDecimal getP95() {
        return this.p95;
    }

    /**
     * Setter for <code>public.performance_results.p95</code>.
     */
    public PerformanceResults setP95(BigDecimal p95) {
        this.p95 = p95;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PerformanceResults other = (PerformanceResults) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (testRunId == null) {
            if (other.testRunId != null)
                return false;
        }
        else if (!testRunId.equals(other.testRunId))
            return false;
        if (testRunPublicId == null) {
            if (other.testRunPublicId != null)
                return false;
        }
        else if (!testRunPublicId.equals(other.testRunPublicId))
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        }
        else if (!name.equals(other.name))
            return false;
        if (requestCount == null) {
            if (other.requestCount != null)
                return false;
        }
        else if (!requestCount.equals(other.requestCount))
            return false;
        if (requestsPerSecond == null) {
            if (other.requestsPerSecond != null)
                return false;
        }
        else if (!requestsPerSecond.equals(other.requestsPerSecond))
            return false;
        if (average == null) {
            if (other.average != null)
                return false;
        }
        else if (!average.equals(other.average))
            return false;
        if (maximum == null) {
            if (other.maximum != null)
                return false;
        }
        else if (!maximum.equals(other.maximum))
            return false;
        if (p95 == null) {
            if (other.p95 != null)
                return false;
        }
        else if (!p95.equals(other.p95))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.testRunId == null) ? 0 : this.testRunId.hashCode());
        result = prime * result + ((this.testRunPublicId == null) ? 0 : this.testRunPublicId.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.requestCount == null) ? 0 : this.requestCount.hashCode());
        result = prime * result + ((this.requestsPerSecond == null) ? 0 : this.requestsPerSecond.hashCode());
        result = prime * result + ((this.average == null) ? 0 : this.average.hashCode());
        result = prime * result + ((this.maximum == null) ? 0 : this.maximum.hashCode());
        result = prime * result + ((this.p95 == null) ? 0 : this.p95.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PerformanceResults (");

        sb.append(id);
        sb.append(", ").append(testRunId);
        sb.append(", ").append(testRunPublicId);
        sb.append(", ").append(name);
        sb.append(", ").append(requestCount);
        sb.append(", ").append(requestsPerSecond);
        sb.append(", ").append(average);
        sb.append(", ").append(maximum);
        sb.append(", ").append(p95);

        sb.append(")");
        return sb.toString();
    }
}
