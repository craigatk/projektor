/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.CodeCoverageFileRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeCoverageFile extends TableImpl<CodeCoverageFileRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.code_coverage_file</code>
     */
    public static final CodeCoverageFile CODE_COVERAGE_FILE = new CodeCoverageFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeCoverageFileRecord> getRecordType() {
        return CodeCoverageFileRecord.class;
    }

    /**
     * The column <code>public.code_coverage_file.id</code>.
     */
    public final TableField<CodeCoverageFileRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.code_coverage_file.code_coverage_run_id</code>.
     */
    public final TableField<CodeCoverageFileRecord, Long> CODE_COVERAGE_RUN_ID = createField(DSL.name("code_coverage_run_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.code_coverage_file.code_coverage_group_id</code>.
     */
    public final TableField<CodeCoverageFileRecord, Long> CODE_COVERAGE_GROUP_ID = createField(DSL.name("code_coverage_group_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.code_coverage_file.stats_id</code>.
     */
    public final TableField<CodeCoverageFileRecord, Long> STATS_ID = createField(DSL.name("stats_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.code_coverage_file.directory_name</code>.
     */
    public final TableField<CodeCoverageFileRecord, String> DIRECTORY_NAME = createField(DSL.name("directory_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_coverage_file.file_name</code>.
     */
    public final TableField<CodeCoverageFileRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_coverage_file.missed_lines</code>.
     */
    public final TableField<CodeCoverageFileRecord, Integer[]> MISSED_LINES = createField(DSL.name("missed_lines"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    /**
     * The column <code>public.code_coverage_file.partial_lines</code>.
     */
    public final TableField<CodeCoverageFileRecord, Integer[]> PARTIAL_LINES = createField(DSL.name("partial_lines"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    /**
     * The column <code>public.code_coverage_file.file_path</code>.
     */
    public final TableField<CodeCoverageFileRecord, String> FILE_PATH = createField(DSL.name("file_path"), SQLDataType.CLOB, this, "");

    private CodeCoverageFile(Name alias, Table<CodeCoverageFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private CodeCoverageFile(Name alias, Table<CodeCoverageFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.code_coverage_file</code> table reference
     */
    public CodeCoverageFile(String alias) {
        this(DSL.name(alias), CODE_COVERAGE_FILE);
    }

    /**
     * Create an aliased <code>public.code_coverage_file</code> table reference
     */
    public CodeCoverageFile(Name alias) {
        this(alias, CODE_COVERAGE_FILE);
    }

    /**
     * Create a <code>public.code_coverage_file</code> table reference
     */
    public CodeCoverageFile() {
        this(DSL.name("code_coverage_file"), null);
    }

    public <O extends Record> CodeCoverageFile(Table<O> child, ForeignKey<O, CodeCoverageFileRecord> key) {
        super(child, key, CODE_COVERAGE_FILE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CODE_COVERAGE_FILE_CODE_COVERAGE_GROUP_ID_IDX, Indexes.CODE_COVERAGE_FILE_CODE_COVERAGE_RUN_ID_IDX);
    }

    @Override
    public Identity<CodeCoverageFileRecord, Long> getIdentity() {
        return (Identity<CodeCoverageFileRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CodeCoverageFileRecord> getPrimaryKey() {
        return Keys.CODE_COVERAGE_FILE_PKEY;
    }

    @Override
    public List<ForeignKey<CodeCoverageFileRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CODE_COVERAGE_FILE__CODE_COVERAGE_FILE_CODE_COVERAGE_RUN_ID_FKEY, Keys.CODE_COVERAGE_FILE__CODE_COVERAGE_FILE_CODE_COVERAGE_GROUP_ID_FKEY, Keys.CODE_COVERAGE_FILE__CODE_COVERAGE_FILE_STATS_ID_FKEY);
    }

    private transient CodeCoverageRun _codeCoverageRun;
    private transient CodeCoverageGroup _codeCoverageGroup;
    private transient CodeCoverageStats _codeCoverageStats;

    /**
     * Get the implicit join path to the <code>public.code_coverage_run</code>
     * table.
     */
    public CodeCoverageRun codeCoverageRun() {
        if (_codeCoverageRun == null)
            _codeCoverageRun = new CodeCoverageRun(this, Keys.CODE_COVERAGE_FILE__CODE_COVERAGE_FILE_CODE_COVERAGE_RUN_ID_FKEY);

        return _codeCoverageRun;
    }

    /**
     * Get the implicit join path to the <code>public.code_coverage_group</code>
     * table.
     */
    public CodeCoverageGroup codeCoverageGroup() {
        if (_codeCoverageGroup == null)
            _codeCoverageGroup = new CodeCoverageGroup(this, Keys.CODE_COVERAGE_FILE__CODE_COVERAGE_FILE_CODE_COVERAGE_GROUP_ID_FKEY);

        return _codeCoverageGroup;
    }

    /**
     * Get the implicit join path to the <code>public.code_coverage_stats</code>
     * table.
     */
    public CodeCoverageStats codeCoverageStats() {
        if (_codeCoverageStats == null)
            _codeCoverageStats = new CodeCoverageStats(this, Keys.CODE_COVERAGE_FILE__CODE_COVERAGE_FILE_STATS_ID_FKEY);

        return _codeCoverageStats;
    }

    @Override
    public CodeCoverageFile as(String alias) {
        return new CodeCoverageFile(DSL.name(alias), this);
    }

    @Override
    public CodeCoverageFile as(Name alias) {
        return new CodeCoverageFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeCoverageFile rename(String name) {
        return new CodeCoverageFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeCoverageFile rename(Name name) {
        return new CodeCoverageFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, Long, String, String, Integer[], Integer[], String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
