/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.ResultsProcessingRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ResultsProcessing extends TableImpl<ResultsProcessingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.results_processing</code>
     */
    public static final ResultsProcessing RESULTS_PROCESSING = new ResultsProcessing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResultsProcessingRecord> getRecordType() {
        return ResultsProcessingRecord.class;
    }

    /**
     * The column <code>public.results_processing.public_id</code>.
     */
    public final TableField<ResultsProcessingRecord, String> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>public.results_processing.status</code>.
     */
    public final TableField<ResultsProcessingRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.results_processing.error_message</code>.
     */
    public final TableField<ResultsProcessingRecord, String> ERROR_MESSAGE = createField(DSL.name("error_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.results_processing.created_timestamp</code>.
     */
    public final TableField<ResultsProcessingRecord, LocalDateTime> CREATED_TIMESTAMP = createField(DSL.name("created_timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    private ResultsProcessing(Name alias, Table<ResultsProcessingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ResultsProcessing(Name alias, Table<ResultsProcessingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.results_processing</code> table reference
     */
    public ResultsProcessing(String alias) {
        this(DSL.name(alias), RESULTS_PROCESSING);
    }

    /**
     * Create an aliased <code>public.results_processing</code> table reference
     */
    public ResultsProcessing(Name alias) {
        this(alias, RESULTS_PROCESSING);
    }

    /**
     * Create a <code>public.results_processing</code> table reference
     */
    public ResultsProcessing() {
        this(DSL.name("results_processing"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_RESULTS_PROCESSING_STATUS);
    }

    @Override
    public UniqueKey<ResultsProcessingRecord> getPrimaryKey() {
        return Keys.RESULTS_PROCESSING_PKEY;
    }

    @Override
    public ResultsProcessing as(String alias) {
        return new ResultsProcessing(DSL.name(alias), this);
    }

    @Override
    public ResultsProcessing as(Name alias) {
        return new ResultsProcessing(alias, this);
    }

    @Override
    public ResultsProcessing as(Table<?> alias) {
        return new ResultsProcessing(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsProcessing rename(String name) {
        return new ResultsProcessing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsProcessing rename(Name name) {
        return new ResultsProcessing(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResultsProcessing rename(Table<?> name) {
        return new ResultsProcessing(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsProcessing where(Condition condition) {
        return new ResultsProcessing(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsProcessing where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsProcessing where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsProcessing where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsProcessing where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsProcessing where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsProcessing where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ResultsProcessing where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsProcessing whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ResultsProcessing whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
