/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import projektor.database.generated.Indexes;
import projektor.database.generated.Keys;
import projektor.database.generated.Public;
import projektor.database.generated.tables.records.CodeCoverageRunRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeCoverageRun extends TableImpl<CodeCoverageRunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.code_coverage_run</code>
     */
    public static final CodeCoverageRun CODE_COVERAGE_RUN = new CodeCoverageRun();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeCoverageRunRecord> getRecordType() {
        return CodeCoverageRunRecord.class;
    }

    /**
     * The column <code>public.code_coverage_run.id</code>.
     */
    public final TableField<CodeCoverageRunRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.code_coverage_run.test_run_public_id</code>.
     */
    public final TableField<CodeCoverageRunRecord, String> TEST_RUN_PUBLIC_ID = createField(DSL.name("test_run_public_id"), SQLDataType.VARCHAR(12), this, "");

    private CodeCoverageRun(Name alias, Table<CodeCoverageRunRecord> aliased) {
        this(alias, aliased, null);
    }

    private CodeCoverageRun(Name alias, Table<CodeCoverageRunRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.code_coverage_run</code> table reference
     */
    public CodeCoverageRun(String alias) {
        this(DSL.name(alias), CODE_COVERAGE_RUN);
    }

    /**
     * Create an aliased <code>public.code_coverage_run</code> table reference
     */
    public CodeCoverageRun(Name alias) {
        this(alias, CODE_COVERAGE_RUN);
    }

    /**
     * Create a <code>public.code_coverage_run</code> table reference
     */
    public CodeCoverageRun() {
        this(DSL.name("code_coverage_run"), null);
    }

    public <O extends Record> CodeCoverageRun(Table<O> child, ForeignKey<O, CodeCoverageRunRecord> key) {
        super(child, key, CODE_COVERAGE_RUN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CODE_COVERAGE_RUN_TEST_RUN_PUBLIC_ID_IDX);
    }

    @Override
    public Identity<CodeCoverageRunRecord, Long> getIdentity() {
        return (Identity<CodeCoverageRunRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CodeCoverageRunRecord> getPrimaryKey() {
        return Keys.CODE_COVERAGE_RUN_PKEY;
    }

    @Override
    public CodeCoverageRun as(String alias) {
        return new CodeCoverageRun(DSL.name(alias), this);
    }

    @Override
    public CodeCoverageRun as(Name alias) {
        return new CodeCoverageRun(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeCoverageRun rename(String name) {
        return new CodeCoverageRun(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeCoverageRun rename(Name name) {
        return new CodeCoverageRun(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
