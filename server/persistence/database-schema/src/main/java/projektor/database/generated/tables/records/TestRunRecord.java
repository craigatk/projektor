/*
 * This file is generated by jOOQ.
 */
package projektor.database.generated.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import projektor.database.generated.tables.TestRun;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestRunRecord extends UpdatableRecordImpl<TestRunRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.test_run.id</code>.
     */
    public TestRunRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.test_run.public_id</code>.
     */
    public TestRunRecord setPublicId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.public_id</code>.
     */
    public String getPublicId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.test_run.total_test_count</code>.
     */
    public TestRunRecord setTotalTestCount(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_test_count</code>.
     */
    public Integer getTotalTestCount() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.test_run.total_passing_count</code>.
     */
    public TestRunRecord setTotalPassingCount(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_passing_count</code>.
     */
    public Integer getTotalPassingCount() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.test_run.total_skipped_count</code>.
     */
    public TestRunRecord setTotalSkippedCount(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_skipped_count</code>.
     */
    public Integer getTotalSkippedCount() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.test_run.total_failure_count</code>.
     */
    public TestRunRecord setTotalFailureCount(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.total_failure_count</code>.
     */
    public Integer getTotalFailureCount() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.test_run.passed</code>.
     */
    public TestRunRecord setPassed(Boolean value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.passed</code>.
     */
    public Boolean getPassed() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.test_run.cumulative_duration</code>.
     */
    public TestRunRecord setCumulativeDuration(BigDecimal value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.cumulative_duration</code>.
     */
    public BigDecimal getCumulativeDuration() {
        return (BigDecimal) get(7);
    }

    /**
     * Setter for <code>public.test_run.average_duration</code>.
     */
    public TestRunRecord setAverageDuration(BigDecimal value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.average_duration</code>.
     */
    public BigDecimal getAverageDuration() {
        return (BigDecimal) get(8);
    }

    /**
     * Setter for <code>public.test_run.slowest_test_case_duration</code>.
     */
    public TestRunRecord setSlowestTestCaseDuration(BigDecimal value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.slowest_test_case_duration</code>.
     */
    public BigDecimal getSlowestTestCaseDuration() {
        return (BigDecimal) get(9);
    }

    /**
     * Setter for <code>public.test_run.created_timestamp</code>.
     */
    public TestRunRecord setCreatedTimestamp(LocalDateTime value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.created_timestamp</code>.
     */
    public LocalDateTime getCreatedTimestamp() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>public.test_run.wall_clock_duration</code>.
     */
    public TestRunRecord setWallClockDuration(BigDecimal value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.test_run.wall_clock_duration</code>.
     */
    public BigDecimal getWallClockDuration() {
        return (BigDecimal) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRunRecord
     */
    public TestRunRecord() {
        super(TestRun.TEST_RUN);
    }

    /**
     * Create a detached, initialised TestRunRecord
     */
    public TestRunRecord(Long id, String publicId, Integer totalTestCount, Integer totalPassingCount, Integer totalSkippedCount, Integer totalFailureCount, Boolean passed, BigDecimal cumulativeDuration, BigDecimal averageDuration, BigDecimal slowestTestCaseDuration, LocalDateTime createdTimestamp, BigDecimal wallClockDuration) {
        super(TestRun.TEST_RUN);

        setId(id);
        setPublicId(publicId);
        setTotalTestCount(totalTestCount);
        setTotalPassingCount(totalPassingCount);
        setTotalSkippedCount(totalSkippedCount);
        setTotalFailureCount(totalFailureCount);
        setPassed(passed);
        setCumulativeDuration(cumulativeDuration);
        setAverageDuration(averageDuration);
        setSlowestTestCaseDuration(slowestTestCaseDuration);
        setCreatedTimestamp(createdTimestamp);
        setWallClockDuration(wallClockDuration);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised TestRunRecord
     */
    public TestRunRecord(projektor.database.generated.tables.pojos.TestRun value) {
        super(TestRun.TEST_RUN);

        if (value != null) {
            setId(value.getId());
            setPublicId(value.getPublicId());
            setTotalTestCount(value.getTotalTestCount());
            setTotalPassingCount(value.getTotalPassingCount());
            setTotalSkippedCount(value.getTotalSkippedCount());
            setTotalFailureCount(value.getTotalFailureCount());
            setPassed(value.getPassed());
            setCumulativeDuration(value.getCumulativeDuration());
            setAverageDuration(value.getAverageDuration());
            setSlowestTestCaseDuration(value.getSlowestTestCaseDuration());
            setCreatedTimestamp(value.getCreatedTimestamp());
            setWallClockDuration(value.getWallClockDuration());
            resetTouchedOnNotNull();
        }
    }
}
