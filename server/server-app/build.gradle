plugins {
    id "com.github.johnrengelman.shadow" version "6.0.0"
    id "com.heroku.sdk.heroku-gradle" version "1.0.4"
    id "application"
    id 'jacoco'
    id "project-report"
}

apply from: '../../gradle/kotlin.gradle'

repositories {
    mavenCentral()
}

mainClassName = 'io.ktor.server.netty.EngineMain'

// This task will generate your fat JAR and put it in the ./build/libs/ directory
shadowJar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

jar.enabled = false // We only use the -all jar produced by Shadow

group 'dev.projektor'
version '1.0'

dependencies {
    implementation project(':server:notification:badge')
    implementation project(':server:notification:github')
    implementation project(':server:persistence:database-schema')
    implementation project(':server:server-api')
    implementation project(':server:parsing:coverage-parser')
    implementation project(':server:parsing:test-results-parser')
    implementation project(':server:parsing:grouped-results-parser')
    implementation project(':server:parsing:performance-results-parser')
    implementation project(':server:persistence:object-store')

    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"
    implementation "io.insert-koin:koin-ktor:$koin_version"
    implementation "io.insert-koin:koin-logger-slf4j:$koin_version"

    implementation "io.ktor:ktor-metrics-micrometer:$ktor_version"
    implementation 'io.micrometer:micrometer-registry-influx:1.4.0'

    implementation "net.javacrumbs.shedlock:shedlock-provider-jdbc-template:4.8.0"

    implementation 'org.simpleflatmapper:sfm-jooq:8.2.3'

    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "net.logstash.logback:logstash-logback-encoder:5.2"
    implementation "org.codehaus.janino:janino:3.0.6" // Needed for conditionals in logback.xml

    implementation "org.apache.commons:commons-lang3:3.8.1"

    implementation platform("io.opentelemetry:opentelemetry-bom:$opentelemetry_version")
    implementation 'io.opentelemetry:opentelemetry-api'
    implementation 'io.opentelemetry:opentelemetry-extension-kotlin'
    testImplementation("io.opentelemetry:opentelemetry-sdk")
    testImplementation("io.opentelemetry:opentelemetry-sdk-testing")

    testImplementation "io.ktor:ktor-server-test-host:$ktor_version"

    testImplementation(testFixtures(project(":server:notification:github")))
    testImplementation(project(':server:test:coverage-fixtures'))
    testImplementation(project(':server:test:performance-fixtures'))
    testImplementation(project(':server:test:test-fixtures'))

    testImplementation 'org.awaitility:awaitility-kotlin:4.0.3'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.2"

    testImplementation "io.insert-koin:koin-test:$koin_version"

    testImplementation "com.github.tomakehurst:wiremock-jre8:$wiremockVersion"
}

task cleanStaticResources(type: Delete) {
    delete "${projectDir}/src/main/resources/static/"
}

evaluationDependsOn(':ui')

task copyUI(type: Copy, dependsOn: ['cleanStaticResources', ':ui:assemble']) {
    from tasks.getByPath(':ui:assemble').outputs
    into "${projectDir}/src/main/resources/static"
}
processResources.mustRunAfter(copyUI)
shadowJar.mustRunAfter(copyUI)

task writeVersion() {
    String projectVersion = findProperty("releaseVersion") ?: version

    inputs.property("projectVersion", projectVersion)
    outputs.file("src/main/resources/version.json")
    outputs.cacheIf { true }

    doLast {
        println "Writing server version $projectVersion"
        new File("$projectDir/src/main/resources/version.json").text = """{
  "version": "$projectVersion"
}"""
    }
}
processResources.dependsOn(writeVersion)

runShadow.dependsOn(copyUI)

task assembleFull(dependsOn: ['copyUI', 'shadowJar'])

task stage(dependsOn: 'assembleFull')

heroku {
    includes = ["${projectDir}/build/libs/server-app-1.0-all.jar", "${projectDir}/opentelemetry/opentelemetry-javaagent-all.jar"]
    includeBuildDir = false
    appName = "projektorlive"
    jdkVersion = "11"
}

deployHeroku.dependsOn('assembleFull')
